

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 07 09:06:37 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2,group=1
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 2.10
    30                           ; Generated 31/07/2019 GMT
    31                           ; 
    32                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F877A Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  000E                     	;# 
    79  000F                     	;# 
    80  0010                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001D                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  0081                     	;# 
    99  0085                     	;# 
   100  0086                     	;# 
   101  0087                     	;# 
   102  0088                     	;# 
   103  0089                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0094                     	;# 
   111  0098                     	;# 
   112  0099                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  010C                     	;# 
   118  010D                     	;# 
   119  010E                     	;# 
   120  010F                     	;# 
   121  018C                     	;# 
   122  018D                     	;# 
   123  0000                     	;# 
   124  0001                     	;# 
   125  0002                     	;# 
   126  0003                     	;# 
   127  0004                     	;# 
   128  0005                     	;# 
   129  0006                     	;# 
   130  0007                     	;# 
   131  0008                     	;# 
   132  0009                     	;# 
   133  000A                     	;# 
   134  000B                     	;# 
   135  000C                     	;# 
   136  000D                     	;# 
   137  000E                     	;# 
   138  000E                     	;# 
   139  000F                     	;# 
   140  0010                     	;# 
   141  0011                     	;# 
   142  0012                     	;# 
   143  0013                     	;# 
   144  0014                     	;# 
   145  0015                     	;# 
   146  0015                     	;# 
   147  0016                     	;# 
   148  0017                     	;# 
   149  0018                     	;# 
   150  0019                     	;# 
   151  001A                     	;# 
   152  001B                     	;# 
   153  001B                     	;# 
   154  001C                     	;# 
   155  001D                     	;# 
   156  001E                     	;# 
   157  001F                     	;# 
   158  0081                     	;# 
   159  0085                     	;# 
   160  0086                     	;# 
   161  0087                     	;# 
   162  0088                     	;# 
   163  0089                     	;# 
   164  008C                     	;# 
   165  008D                     	;# 
   166  008E                     	;# 
   167  0091                     	;# 
   168  0092                     	;# 
   169  0093                     	;# 
   170  0094                     	;# 
   171  0098                     	;# 
   172  0099                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  010F                     	;# 
   181  018C                     	;# 
   182  018D                     	;# 
   183  0000                     	;# 
   184  0001                     	;# 
   185  0002                     	;# 
   186  0003                     	;# 
   187  0004                     	;# 
   188  0005                     	;# 
   189  0006                     	;# 
   190  0007                     	;# 
   191  0008                     	;# 
   192  0009                     	;# 
   193  000A                     	;# 
   194  000B                     	;# 
   195  000C                     	;# 
   196  000D                     	;# 
   197  000E                     	;# 
   198  000E                     	;# 
   199  000F                     	;# 
   200  0010                     	;# 
   201  0011                     	;# 
   202  0012                     	;# 
   203  0013                     	;# 
   204  0014                     	;# 
   205  0015                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0017                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  001B                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  001D                     	;# 
   216  001E                     	;# 
   217  001F                     	;# 
   218  0081                     	;# 
   219  0085                     	;# 
   220  0086                     	;# 
   221  0087                     	;# 
   222  0088                     	;# 
   223  0089                     	;# 
   224  008C                     	;# 
   225  008D                     	;# 
   226  008E                     	;# 
   227  0091                     	;# 
   228  0092                     	;# 
   229  0093                     	;# 
   230  0094                     	;# 
   231  0098                     	;# 
   232  0099                     	;# 
   233  009C                     	;# 
   234  009D                     	;# 
   235  009E                     	;# 
   236  009F                     	;# 
   237  010C                     	;# 
   238  010D                     	;# 
   239  010E                     	;# 
   240  010F                     	;# 
   241  018C                     	;# 
   242  018D                     	;# 
   243  0000                     	;# 
   244  0001                     	;# 
   245  0002                     	;# 
   246  0003                     	;# 
   247  0004                     	;# 
   248  0005                     	;# 
   249  0006                     	;# 
   250  0007                     	;# 
   251  0008                     	;# 
   252  0009                     	;# 
   253  000A                     	;# 
   254  000B                     	;# 
   255  000C                     	;# 
   256  000D                     	;# 
   257  000E                     	;# 
   258  000E                     	;# 
   259  000F                     	;# 
   260  0010                     	;# 
   261  0011                     	;# 
   262  0012                     	;# 
   263  0013                     	;# 
   264  0014                     	;# 
   265  0015                     	;# 
   266  0015                     	;# 
   267  0016                     	;# 
   268  0017                     	;# 
   269  0018                     	;# 
   270  0019                     	;# 
   271  001A                     	;# 
   272  001B                     	;# 
   273  001B                     	;# 
   274  001C                     	;# 
   275  001D                     	;# 
   276  001E                     	;# 
   277  001F                     	;# 
   278  0081                     	;# 
   279  0085                     	;# 
   280  0086                     	;# 
   281  0087                     	;# 
   282  0088                     	;# 
   283  0089                     	;# 
   284  008C                     	;# 
   285  008D                     	;# 
   286  008E                     	;# 
   287  0091                     	;# 
   288  0092                     	;# 
   289  0093                     	;# 
   290  0094                     	;# 
   291  0098                     	;# 
   292  0099                     	;# 
   293  009C                     	;# 
   294  009D                     	;# 
   295  009E                     	;# 
   296  009F                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  018C                     	;# 
   302  018D                     	;# 
   303  0000                     	;# 
   304  0001                     	;# 
   305  0002                     	;# 
   306  0003                     	;# 
   307  0004                     	;# 
   308  0005                     	;# 
   309  0006                     	;# 
   310  0007                     	;# 
   311  0008                     	;# 
   312  0009                     	;# 
   313  000A                     	;# 
   314  000B                     	;# 
   315  000C                     	;# 
   316  000D                     	;# 
   317  000E                     	;# 
   318  000E                     	;# 
   319  000F                     	;# 
   320  0010                     	;# 
   321  0011                     	;# 
   322  0012                     	;# 
   323  0013                     	;# 
   324  0014                     	;# 
   325  0015                     	;# 
   326  0015                     	;# 
   327  0016                     	;# 
   328  0017                     	;# 
   329  0018                     	;# 
   330  0019                     	;# 
   331  001A                     	;# 
   332  001B                     	;# 
   333  001B                     	;# 
   334  001C                     	;# 
   335  001D                     	;# 
   336  001E                     	;# 
   337  001F                     	;# 
   338  0081                     	;# 
   339  0085                     	;# 
   340  0086                     	;# 
   341  0087                     	;# 
   342  0088                     	;# 
   343  0089                     	;# 
   344  008C                     	;# 
   345  008D                     	;# 
   346  008E                     	;# 
   347  0091                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  009F                     	;# 
   357  010C                     	;# 
   358  010D                     	;# 
   359  010E                     	;# 
   360  010F                     	;# 
   361  018C                     	;# 
   362  018D                     	;# 
   363  0000                     	;# 
   364  0001                     	;# 
   365  0002                     	;# 
   366  0003                     	;# 
   367  0004                     	;# 
   368  0005                     	;# 
   369  0006                     	;# 
   370  0007                     	;# 
   371  0008                     	;# 
   372  0009                     	;# 
   373  000A                     	;# 
   374  000B                     	;# 
   375  000C                     	;# 
   376  000D                     	;# 
   377  000E                     	;# 
   378  000E                     	;# 
   379  000F                     	;# 
   380  0010                     	;# 
   381  0011                     	;# 
   382  0012                     	;# 
   383  0013                     	;# 
   384  0014                     	;# 
   385  0015                     	;# 
   386  0015                     	;# 
   387  0016                     	;# 
   388  0017                     	;# 
   389  0018                     	;# 
   390  0019                     	;# 
   391  001A                     	;# 
   392  001B                     	;# 
   393  001B                     	;# 
   394  001C                     	;# 
   395  001D                     	;# 
   396  001E                     	;# 
   397  001F                     	;# 
   398  0081                     	;# 
   399  0085                     	;# 
   400  0086                     	;# 
   401  0087                     	;# 
   402  0088                     	;# 
   403  0089                     	;# 
   404  008C                     	;# 
   405  008D                     	;# 
   406  008E                     	;# 
   407  0091                     	;# 
   408  0092                     	;# 
   409  0093                     	;# 
   410  0094                     	;# 
   411  0098                     	;# 
   412  0099                     	;# 
   413  009C                     	;# 
   414  009D                     	;# 
   415  009E                     	;# 
   416  009F                     	;# 
   417  010C                     	;# 
   418  010D                     	;# 
   419  010E                     	;# 
   420  010F                     	;# 
   421  018C                     	;# 
   422  018D                     	;# 
   423                           
   424                           	psect	idataBANK0
   425  03F6                     __pidataBANK0:	
   426                           
   427                           ;initializer for _SSD_LOT_ARR
   428  03F6  343F               	retlw	63
   429  03F7  3406               	retlw	6
   430  03F8  345B               	retlw	91
   431  03F9  344F               	retlw	79
   432  03FA  3466               	retlw	102
   433  03FB  346D               	retlw	109
   434  03FC  347D               	retlw	125
   435  03FD  3407               	retlw	7
   436  03FE  347F               	retlw	127
   437  03FF  346F               	retlw	111
   438  0400  3400               	retlw	0
   439  0008                     _PORTD	set	8
   440  0006                     _PORTB	set	6
   441  0089                     _TRISE	set	137
   442  0087                     _TRISC	set	135
   443  0085                     _TRISA	set	133
   444  0088                     _TRISD	set	136
   445  0086                     _TRISB	set	134
   446                           
   447                           ; #config settings
   448  0000                     
   449                           	psect	cinit
   450  07E6                     start_initialization:	
   451  07E6                     __initialization:	
   452                           
   453                           ; Initialize objects allocated to BANK0
   454  07E6  1383               	bcf	3,7	;select IRP bank0
   455  07E7  303E               	movlw	low (__pdataBANK0+11)
   456  07E8  00FD               	movwf	btemp+-1
   457  07E9  3003               	movlw	high __pidataBANK0
   458  07EA  00FE               	movwf	btemp
   459  07EB  30F6               	movlw	low __pidataBANK0
   460  07EC  00FF               	movwf	btemp+1
   461  07ED  3033               	movlw	low __pdataBANK0
   462  07EE  0084               	movwf	4
   463  07EF  120A  118A  2405  120A  118A  	fcall	init_ram0
   464                           
   465                           ; Clear objects allocated to BANK0
   466  07F4  3020               	movlw	low __pbssBANK0
   467  07F5  0084               	movwf	4
   468  07F6  3033               	movlw	low (__pbssBANK0+19)
   469  07F7  120A  118A  23E4  120A  118A  	fcall	clear_ram0
   470  07FC                     end_of_initialization:	
   471                           ;End of C runtime variable initialization code
   472                           
   473  07FC                     __end_of__initialization:	
   474  07FC  0183               	clrf	3
   475  07FD  120A  118A  2D2B   	ljmp	_main	;jump to C main() function
   476                           
   477                           	psect	bssBANK0
   478  0020                     __pbssBANK0:	
   479  0020                     _SW_DATA:	
   480  0020                     	ds	9
   481  0029                     _Buffer:	
   482  0029                     	ds	4
   483  002D                     _CurrentMode:	
   484  002D                     	ds	1
   485  002E                     _currentSSD:	
   486  002E                     	ds	1
   487  002F                     _CurrentTime:	
   488  002F                     	ds	4
   489                           
   490                           	psect	dataBANK0
   491  0033                     __pdataBANK0:	
   492  0033                     _SSD_LOT_ARR:	
   493  0033                     	ds	11
   494                           
   495                           	psect	inittext
   496  0401                     init_fetch0:	
   497                           ;	Called with low address in FSR and high address in W
   498                           
   499  0401  087E               	movf	btemp,w
   500  0402  008A               	movwf	10
   501  0403  087F               	movf	btemp+1,w
   502  0404  0082               	movwf	2
   503  0405                     init_ram0:	
   504                           ;Called with:
   505                           ;	high address of idata address in btemp 
   506                           ;	low address of idata address in btemp+1 
   507                           ;	low address of data in FSR
   508                           ;	high address + 1 of data in btemp-1
   509                           
   510  0405  120A  118A  2401  120A  118A  	fcall	init_fetch0
   511  040A  0080               	movwf	0
   512  040B  0A84               	incf	4,f
   513  040C  0804               	movf	4,w
   514  040D  067D               	xorwf	btemp+-1,w
   515  040E  1903               	btfsc	3,2
   516  040F  3400               	retlw	0
   517  0410  0AFF               	incf	btemp+1,f
   518  0411  1903               	btfsc	3,2
   519  0412  0AFE               	incf	btemp,f
   520  0413  2C05               	goto	init_ram0
   521                           
   522                           	psect	clrtext
   523  03E4                     clear_ram0:	
   524                           ;	Called with FSR containing the base address, and
   525                           ;	W with the last address+1
   526                           
   527  03E4  0064               	clrwdt	;clear the watchdog before getting into this loop
   528  03E5                     clrloop0:	
   529  03E5  0180               	clrf	0	;clear RAM location pointed to by FSR
   530  03E6  0A84               	incf	4,f	;increment pointer
   531  03E7  0604               	xorwf	4,w	;XOR with final address
   532  03E8  1903               	btfsc	3,2	;have we reached the end yet?
   533  03E9  3400               	retlw	0	;all done for this memory range, return
   534  03EA  0604               	xorwf	4,w	;XOR again to restore value
   535  03EB  2BE5               	goto	clrloop0	;do the next byte
   536                           
   537                           	psect	cstackCOMMON
   538  0070                     __pcstackCOMMON:	
   539  0070                     ?_SSD_Init:	
   540  0070                     ?_SSD_Set_Symbol:	
   541                           ; 1 bytes @ 0x0
   542                           
   543  0070                     ?_CLOCK_Init:	
   544                           ; 1 bytes @ 0x0
   545                           
   546  0070                     ??_CLOCK_Init:	
   547                           ; 1 bytes @ 0x0
   548                           
   549  0070                     ?_SW_Update:	
   550                           ; 1 bytes @ 0x0
   551                           
   552  0070                     ?_CLOCK_Update:	
   553                           ; 1 bytes @ 0x0
   554                           
   555  0070                     ?_SSD_Update:	
   556                           ; 1 bytes @ 0x0
   557                           
   558  0070                     ?_SSD_Disable:	
   559                           ; 1 bytes @ 0x0
   560                           
   561  0070                     ??_SSD_Disable:	
   562                           ; 1 bytes @ 0x0
   563                           
   564  0070                     ?_SSD_Enable:	
   565                           ; 1 bytes @ 0x0
   566                           
   567  0070                     ??_SSD_Enable:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_SW_UpdateState:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_set_mode_process:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_GPIO_Init_Port:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_GPIO_Init_Pin:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_main:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ?_SW_GetState:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_CLOCK_Increment:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ??_CLOCK_Increment:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?___bmul:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     SSD_Set_Symbol@index:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ___bmul@multiplicand:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     GPIO_Init_Port@DirRegAddress:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     GPIO_Init_Pin@DirRegAddress:	
   607                           ; 2 bytes @ 0x0
   608                           
   609                           
   610                           ; 2 bytes @ 0x0
   611  0070                     	ds	1
   612  0071                     ??_SSD_Set_Symbol:	
   613  0071                     ??___bmul:	
   614                           ; 1 bytes @ 0x1
   615                           
   616                           
   617                           ; 1 bytes @ 0x1
   618  0071                     	ds	1
   619  0072                     GPIO_Init_Port@dir:	
   620  0072                     GPIO_Init_Pin@pin_number:	
   621                           ; 1 bytes @ 0x2
   622                           
   623  0072                     SSD_Set_Symbol@symbol:	
   624                           ; 1 bytes @ 0x2
   625                           
   626  0072                     SSD_Disable@s:	
   627                           ; 1 bytes @ 0x2
   628                           
   629  0072                     SSD_Enable@s:	
   630                           ; 1 bytes @ 0x2
   631                           
   632  0072                     ___bmul@product:	
   633                           ; 1 bytes @ 0x2
   634                           
   635                           
   636                           ; 1 bytes @ 0x2
   637  0072                     	ds	1
   638  0073                     ??_SSD_Update:	
   639  0073                     ??_GPIO_Init_Port:	
   640                           ; 1 bytes @ 0x3
   641                           
   642  0073                     GPIO_Init_Pin@dir:	
   643                           ; 1 bytes @ 0x3
   644                           
   645  0073                     ___bmul@multiplier:	
   646                           ; 1 bytes @ 0x3
   647                           
   648                           
   649                           ; 1 bytes @ 0x3
   650  0073                     	ds	1
   651  0074                     ??_SW_UpdateState:	
   652  0074                     ??_GPIO_Init_Pin:	
   653                           ; 1 bytes @ 0x4
   654                           
   655  0074                     ??_SW_GetState:	
   656                           ; 1 bytes @ 0x4
   657                           
   658                           
   659                           ; 1 bytes @ 0x4
   660  0074                     	ds	1
   661  0075                     _GPIO_Init_Port$31:	
   662                           
   663                           ; 2 bytes @ 0x5
   664  0075                     	ds	1
   665  0076                     SW_GetState@sw:	
   666                           
   667                           ; 1 bytes @ 0x6
   668  0076                     	ds	1
   669  0077                     SW_GetState@ret:	
   670  0077                     SW_UpdateState@sw:	
   671                           ; 1 bytes @ 0x7
   672                           
   673                           
   674                           ; 1 bytes @ 0x7
   675  0077                     	ds	1
   676  0078                     ??_SSD_Init:	
   677  0078                     ??_SW_Update:	
   678                           ; 1 bytes @ 0x8
   679                           
   680  0078                     ??_set_mode_process:	
   681                           ; 1 bytes @ 0x8
   682                           
   683                           
   684                           ; 1 bytes @ 0x8
   685  0078                     	ds	1
   686  0079                     set_mode_process@var:	
   687  0079                     SSD_Init@i:	
   688                           ; 1 bytes @ 0x9
   689                           
   690                           
   691                           ; 2 bytes @ 0x9
   692  0079                     	ds	1
   693  007A                     ??_CLOCK_Update:	
   694                           
   695                           ; 1 bytes @ 0xA
   696  007A                     	ds	2
   697  007C                     ??_main:	
   698                           
   699                           ; 1 bytes @ 0xC
   700  007C                     	ds	2
   701                           
   702                           	psect	maintext
   703  052B                     __pmaintext:	
   704 ;;
   705 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   706 ;;
   707 ;; *************** function _main *****************
   708 ;; Defined at:
   709 ;;		line 16 in file "Digital_Clock.c"
   710 ;; Parameters:    Size  Location     Type
   711 ;;		None
   712 ;; Auto vars:     Size  Location     Type
   713 ;;  i               1    0        unsigned char 
   714 ;; Return value:  Size  Location     Type
   715 ;;                  1    wreg      void 
   716 ;; Registers used:
   717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   718 ;; Tracked objects:
   719 ;;		On entry : B00/0
   720 ;;		On exit  : 0/0
   721 ;;		Unchanged: 0/0
   722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   723 ;;      Params:         0       0       0       0       0
   724 ;;      Locals:         0       1       0       0       0
   725 ;;      Temps:          2       0       0       0       0
   726 ;;      Totals:         2       1       0       0       0
   727 ;;Total ram usage:        3 bytes
   728 ;; Hardware stack levels required when called:    4
   729 ;; This function calls:
   730 ;;		_CLOCK_Init
   731 ;;		_CLOCK_Update
   732 ;;		_SSD_Init
   733 ;;		_SSD_Set_Symbol
   734 ;;		_SSD_Update
   735 ;;		_SW_Update
   736 ;; This function is called by:
   737 ;;		Startup code after reset
   738 ;; This function uses a non-reentrant model
   739 ;;
   740                           
   741                           
   742                           ;psect for function _main
   743  052B                     _main:	
   744  052B                     l1419:	
   745                           ;incstack = 0
   746                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   747                           
   748  052B                     l1421:	
   749                           
   750                           ;Digital_Clock.c: 19:     SSD_Init();
   751  052B  120A  118A  2679  120A  118A  	fcall	_SSD_Init
   752  0530                     l1423:	
   753                           
   754                           ;Digital_Clock.c: 22:     SSD_Set_Symbol(i,SSD_MINUTES_UNITS);
   755  0530  01F0               	clrf	SSD_Set_Symbol@index
   756  0531  3000               	movlw	0
   757  0532  120A  118A  23EC  120A  118A  	fcall	_SSD_Set_Symbol
   758  0537                     l1425:	
   759                           
   760                           ;Digital_Clock.c: 23:     SSD_Set_Symbol(2,SSD_MINUTES_TENS);
   761  0537  01F0               	clrf	SSD_Set_Symbol@index
   762  0538  0AF0               	incf	SSD_Set_Symbol@index,f
   763  0539  3002               	movlw	2
   764  053A  120A  118A  23EC  120A  118A  	fcall	_SSD_Set_Symbol
   765  053F                     l1427:	
   766                           
   767                           ;Digital_Clock.c: 24:     SSD_Set_Symbol(3,SSD_HOURS_UNITS);
   768  053F  3002               	movlw	2
   769  0540  00FC               	movwf	??_main
   770  0541  087C               	movf	??_main,w
   771  0542  00F0               	movwf	SSD_Set_Symbol@index
   772  0543  3003               	movlw	3
   773  0544  120A  118A  23EC  120A  118A  	fcall	_SSD_Set_Symbol
   774  0549                     l1429:	
   775                           
   776                           ;Digital_Clock.c: 25:     SSD_Set_Symbol(4,SSD_HOURS_TENS);
   777  0549  3003               	movlw	3
   778  054A  00FC               	movwf	??_main
   779  054B  087C               	movf	??_main,w
   780  054C  00F0               	movwf	SSD_Set_Symbol@index
   781  054D  3004               	movlw	4
   782  054E  120A  118A  23EC  120A  118A  	fcall	_SSD_Set_Symbol
   783  0553                     l1431:	
   784                           
   785                           ;Digital_Clock.c: 28:     CLOCK_Init();
   786  0553  120A  118A  23DC  120A  118A  	fcall	_CLOCK_Init
   787  0558                     l1433:	
   788                           
   789                           ;Digital_Clock.c: 32:     {;Digital_Clock.c: 33:         _delay((unsigned long)((5)*(200
      +                          00000/4000.0)));
   790  0558  3021               	movlw	33
   791  0559  00FD               	movwf	??_main+1
   792  055A  3076               	movlw	118
   793  055B  00FC               	movwf	??_main
   794  055C                     u617:	
   795  055C  0BFC               	decfsz	??_main,f
   796  055D  2D5C               	goto	u617
   797  055E  0BFD               	decfsz	??_main+1,f
   798  055F  2D5C               	goto	u617
   799  0560  0000               	nop
   800  0561                     l1435:	
   801                           
   802                           ;Digital_Clock.c: 34:         SW_Update();
   803  0561  120A  118A  24EC  120A  118A  	fcall	_SW_Update
   804  0566                     l1437:	
   805                           
   806                           ;Digital_Clock.c: 35:         CLOCK_Update();
   807  0566  120A  118A  25C4  120A  118A  	fcall	_CLOCK_Update
   808  056B                     l1439:	
   809                           
   810                           ;Digital_Clock.c: 36:         SSD_Update();
   811  056B  120A  118A  2461  120A  118A  	fcall	_SSD_Update
   812  0570  2D58               	goto	l1433
   813  0571  120A  118A  2800   	ljmp	start
   814  0574                     __end_of_main:	
   815                           
   816                           	psect	text1
   817  04EC                     __ptext1:	
   818 ;; *************** function _SW_Update *****************
   819 ;; Defined at:
   820 ;;		line 70 in file "SW.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;		None
   823 ;; Auto vars:     Size  Location     Type
   824 ;;		None
   825 ;; Return value:  Size  Location     Type
   826 ;;                  1    wreg      void 
   827 ;; Registers used:
   828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   829 ;; Tracked objects:
   830 ;;		On entry : 0/0
   831 ;;		On exit  : 0/0
   832 ;;		Unchanged: 0/0
   833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   834 ;;      Params:         0       0       0       0       0
   835 ;;      Locals:         0       0       0       0       0
   836 ;;      Temps:          2       0       0       0       0
   837 ;;      Totals:         2       0       0       0       0
   838 ;;Total ram usage:        2 bytes
   839 ;; Hardware stack levels used:    1
   840 ;; Hardware stack levels required when called:    2
   841 ;; This function calls:
   842 ;;		_SW_UpdateState
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848                           
   849                           ;psect for function _SW_Update
   850  04EC                     _SW_Update:	
   851  04EC                     l1357:	
   852                           ;incstack = 0
   853                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   854                           
   855                           
   856                           ;SW.c: 76:     SW_DATA[SW_PLUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
   857  04EC  1283               	bcf	3,5	;RP0=0, select bank0
   858  04ED  1303               	bcf	3,6	;RP1=0, select bank0
   859  04EE  0821               	movf	_SW_DATA+1,w
   860  04EF  00F8               	movwf	??_SW_Update
   861  04F0  0878               	movf	??_SW_Update,w
   862  04F1  00A0               	movwf	_SW_DATA
   863  04F2                     l1359:	
   864                           
   865                           ;SW.c: 77:     SW_DATA[SW_PLUS].samples[1] = (((PORTB) >> (0))& 1);
   866  04F2  0806               	movf	6,w	;volatile
   867  04F3  3901               	andlw	1
   868  04F4  00F8               	movwf	??_SW_Update
   869  04F5  0878               	movf	??_SW_Update,w
   870  04F6  00A1               	movwf	_SW_DATA+1
   871  04F7                     l1361:	
   872                           
   873                           ;SW.c: 79:     SW_UpdateState(SW_PLUS);
   874  04F7  3000               	movlw	0
   875  04F8  120A  118A  26ED  120A  118A  	fcall	_SW_UpdateState
   876  04FD                     l1363:	
   877                           
   878                           ;SW.c: 81:     SW_DATA[SW_MINUS].samples[0] = SW_DATA[SW_PLUS].samples[1];
   879  04FD  1283               	bcf	3,5	;RP0=0, select bank0
   880  04FE  1303               	bcf	3,6	;RP1=0, select bank0
   881  04FF  0821               	movf	_SW_DATA+1,w
   882  0500  00F8               	movwf	??_SW_Update
   883  0501  0878               	movf	??_SW_Update,w
   884  0502  00A3               	movwf	_SW_DATA+3
   885  0503                     l1365:	
   886                           
   887                           ;SW.c: 82:     SW_DATA[SW_MINUS].samples[1] = (((PORTB) >> (1))& 1);
   888  0503  0806               	movf	6,w	;volatile
   889  0504  00F8               	movwf	??_SW_Update
   890  0505  1003               	clrc
   891  0506  0C78               	rrf	??_SW_Update,w
   892  0507  3901               	andlw	1
   893  0508  00F9               	movwf	??_SW_Update+1
   894  0509  0879               	movf	??_SW_Update+1,w
   895  050A  00A4               	movwf	_SW_DATA+4
   896  050B                     l1367:	
   897                           
   898                           ;SW.c: 84:     SW_UpdateState(SW_MINUS);
   899  050B  3001               	movlw	1
   900  050C  120A  118A  26ED  120A  118A  	fcall	_SW_UpdateState
   901  0511                     l1369:	
   902                           
   903                           ;SW.c: 87:     SW_DATA[SW_SET].samples[0] = SW_DATA[SW_PLUS].samples[1];
   904  0511  1283               	bcf	3,5	;RP0=0, select bank0
   905  0512  1303               	bcf	3,6	;RP1=0, select bank0
   906  0513  0821               	movf	_SW_DATA+1,w
   907  0514  00F8               	movwf	??_SW_Update
   908  0515  0878               	movf	??_SW_Update,w
   909  0516  00A6               	movwf	_SW_DATA+6
   910  0517                     l1371:	
   911                           
   912                           ;SW.c: 88:     SW_DATA[SW_SET].samples[1] = (((PORTB) >> (2))& 1);
   913  0517  0806               	movf	6,w	;volatile
   914  0518  00F8               	movwf	??_SW_Update
   915  0519  3002               	movlw	2
   916  051A                     u575:	
   917  051A  1003               	clrc
   918  051B  0CF8               	rrf	??_SW_Update,f
   919  051C  3EFF               	addlw	-1
   920  051D  1D03               	skipz
   921  051E  2D1A               	goto	u575
   922  051F  0878               	movf	??_SW_Update,w
   923  0520  3901               	andlw	1
   924  0521  00F9               	movwf	??_SW_Update+1
   925  0522  0879               	movf	??_SW_Update+1,w
   926  0523  00A7               	movwf	_SW_DATA+7
   927  0524                     l1373:	
   928                           
   929                           ;SW.c: 90:     SW_UpdateState(SW_SET);
   930  0524  3002               	movlw	2
   931  0525  120A  118A  26ED  120A  118A  	fcall	_SW_UpdateState
   932  052A                     l119:	
   933  052A  0008               	return
   934  052B                     __end_of_SW_Update:	
   935                           
   936                           	psect	text2
   937  06ED                     __ptext2:	
   938 ;; *************** function _SW_UpdateState *****************
   939 ;; Defined at:
   940 ;;		line 93 in file "SW.c"
   941 ;; Parameters:    Size  Location     Type
   942 ;;  sw              1    wreg     enum E859
   943 ;; Auto vars:     Size  Location     Type
   944 ;;  sw              1    7[COMMON] enum E859
   945 ;; Return value:  Size  Location     Type
   946 ;;                  1    wreg      void 
   947 ;; Registers used:
   948 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   949 ;; Tracked objects:
   950 ;;		On entry : 0/0
   951 ;;		On exit  : 0/0
   952 ;;		Unchanged: 0/0
   953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   954 ;;      Params:         0       0       0       0       0
   955 ;;      Locals:         1       0       0       0       0
   956 ;;      Temps:          3       0       0       0       0
   957 ;;      Totals:         4       0       0       0       0
   958 ;;Total ram usage:        4 bytes
   959 ;; Hardware stack levels used:    1
   960 ;; Hardware stack levels required when called:    1
   961 ;; This function calls:
   962 ;;		___bmul
   963 ;; This function is called by:
   964 ;;		_SW_Update
   965 ;; This function uses a non-reentrant model
   966 ;;
   967                           
   968                           
   969                           ;psect for function _SW_UpdateState
   970  06ED                     _SW_UpdateState:	
   971                           
   972                           ;incstack = 0
   973                           ; Regs used in _SW_UpdateState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   974                           ;SW_UpdateState@sw stored from wreg
   975  06ED  00F7               	movwf	SW_UpdateState@sw
   976  06EE                     l1263:	
   977                           
   978                           ;SW.c: 93: void SW_UpdateState(SW_t sw);SW.c: 94: {;SW.c: 110:     switch(SW_DATA[sw].st
      +                          ate)
   979  06EE  2FC2               	goto	l1291
   980  06EF                     l1265:	
   981                           
   982                           ;SW.c: 114:             if(SW_DATA[sw].samples[0] == 1 && SW_DATA[sw].samples[1] == 1)
   983  06EF  3003               	movlw	3
   984  06F0  00F4               	movwf	??_SW_UpdateState
   985  06F1  0874               	movf	??_SW_UpdateState,w
   986  06F2  00F0               	movwf	___bmul@multiplicand
   987  06F3  0877               	movf	SW_UpdateState@sw,w
   988  06F4  120A  118A  2428  120A  118A  	fcall	___bmul
   989  06F9  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
   990  06FA  0084               	movwf	4
   991  06FB  1383               	bcf	3,7	;select IRP bank0
   992  06FC  0300               	decf	0,w
   993  06FD  1D03               	btfss	3,2
   994  06FE  2F00               	goto	u461
   995  06FF  2F01               	goto	u460
   996  0700                     u461:	
   997  0700  2FE5               	goto	l133
   998  0701                     u460:	
   999  0701                     l1267:	
  1000  0701  3003               	movlw	3
  1001  0702  00F4               	movwf	??_SW_UpdateState
  1002  0703  0874               	movf	??_SW_UpdateState,w
  1003  0704  00F0               	movwf	___bmul@multiplicand
  1004  0705  0877               	movf	SW_UpdateState@sw,w
  1005  0706  120A  118A  2428  120A  118A  	fcall	___bmul
  1006  070B  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  1007  070C  0084               	movwf	4
  1008  070D  1383               	bcf	3,7	;select IRP bank0
  1009  070E  0300               	decf	0,w
  1010  070F  1D03               	btfss	3,2
  1011  0710  2F12               	goto	u471
  1012  0711  2F13               	goto	u470
  1013  0712                     u471:	
  1014  0712  2FE5               	goto	l133
  1015  0713                     u470:	
  1016  0713                     l1269:	
  1017                           
  1018                           ;SW.c: 115:                 SW_DATA[sw].state = SW_RELEASED;
  1019  0713  3003               	movlw	3
  1020  0714  00F4               	movwf	??_SW_UpdateState
  1021  0715  0874               	movf	??_SW_UpdateState,w
  1022  0716  00F0               	movwf	___bmul@multiplicand
  1023  0717  0877               	movf	SW_UpdateState@sw,w
  1024  0718  120A  118A  2428  120A  118A  	fcall	___bmul
  1025  071D  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1026  071E  0084               	movwf	4
  1027  071F  1383               	bcf	3,7	;select IRP bank0
  1028  0720  0180               	clrf	0
  1029  0721  2FE5               	goto	l133
  1030  0722                     l1271:	
  1031                           
  1032                           ;SW.c: 118:             if(SW_DATA[sw].samples[0] == 0 && SW_DATA[sw].samples[1] == 0)
  1033  0722  3003               	movlw	3
  1034  0723  00F4               	movwf	??_SW_UpdateState
  1035  0724  0874               	movf	??_SW_UpdateState,w
  1036  0725  00F0               	movwf	___bmul@multiplicand
  1037  0726  0877               	movf	SW_UpdateState@sw,w
  1038  0727  120A  118A  2428  120A  118A  	fcall	___bmul
  1039  072C  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  1040  072D  0084               	movwf	4
  1041  072E  1383               	bcf	3,7	;select IRP bank0
  1042  072F  0800               	movf	0,w
  1043  0730  1D03               	btfss	3,2
  1044  0731  2F33               	goto	u481
  1045  0732  2F34               	goto	u480
  1046  0733                     u481:	
  1047  0733  2FE5               	goto	l133
  1048  0734                     u480:	
  1049  0734                     l1273:	
  1050  0734  3003               	movlw	3
  1051  0735  00F4               	movwf	??_SW_UpdateState
  1052  0736  0874               	movf	??_SW_UpdateState,w
  1053  0737  00F0               	movwf	___bmul@multiplicand
  1054  0738  0877               	movf	SW_UpdateState@sw,w
  1055  0739  120A  118A  2428  120A  118A  	fcall	___bmul
  1056  073E  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  1057  073F  0084               	movwf	4
  1058  0740  1383               	bcf	3,7	;select IRP bank0
  1059  0741  0800               	movf	0,w
  1060  0742  1D03               	btfss	3,2
  1061  0743  2F45               	goto	u491
  1062  0744  2F46               	goto	u490
  1063  0745                     u491:	
  1064  0745  2FE5               	goto	l133
  1065  0746                     u490:	
  1066  0746                     l1275:	
  1067                           
  1068                           ;SW.c: 119:                 SW_DATA[sw].state = SW_PRE_PRESSED;
  1069  0746  3003               	movlw	3
  1070  0747  00F4               	movwf	??_SW_UpdateState
  1071  0748  0874               	movf	??_SW_UpdateState,w
  1072  0749  00F0               	movwf	___bmul@multiplicand
  1073  074A  0877               	movf	SW_UpdateState@sw,w
  1074  074B  120A  118A  2428  120A  118A  	fcall	___bmul
  1075  0750  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1076  0751  0084               	movwf	4
  1077  0752  1383               	bcf	3,7	;select IRP bank0
  1078  0753  0180               	clrf	0
  1079  0754  0A80               	incf	0,f
  1080  0755  2FE5               	goto	l133
  1081  0756                     l1277:	
  1082                           
  1083                           ;SW.c: 122:             if(SW_DATA[sw].samples[0] == 0 && SW_DATA[sw].samples[1] == 0)
  1084  0756  3003               	movlw	3
  1085  0757  00F4               	movwf	??_SW_UpdateState
  1086  0758  0874               	movf	??_SW_UpdateState,w
  1087  0759  00F0               	movwf	___bmul@multiplicand
  1088  075A  0877               	movf	SW_UpdateState@sw,w
  1089  075B  120A  118A  2428  120A  118A  	fcall	___bmul
  1090  0760  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  1091  0761  0084               	movwf	4
  1092  0762  1383               	bcf	3,7	;select IRP bank0
  1093  0763  0800               	movf	0,w
  1094  0764  1D03               	btfss	3,2
  1095  0765  2F67               	goto	u501
  1096  0766  2F68               	goto	u500
  1097  0767                     u501:	
  1098  0767  2FE5               	goto	l133
  1099  0768                     u500:	
  1100  0768                     l1279:	
  1101  0768  3003               	movlw	3
  1102  0769  00F4               	movwf	??_SW_UpdateState
  1103  076A  0874               	movf	??_SW_UpdateState,w
  1104  076B  00F0               	movwf	___bmul@multiplicand
  1105  076C  0877               	movf	SW_UpdateState@sw,w
  1106  076D  120A  118A  2428  120A  118A  	fcall	___bmul
  1107  0772  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  1108  0773  0084               	movwf	4
  1109  0774  1383               	bcf	3,7	;select IRP bank0
  1110  0775  0800               	movf	0,w
  1111  0776  1D03               	btfss	3,2
  1112  0777  2F79               	goto	u511
  1113  0778  2F7A               	goto	u510
  1114  0779                     u511:	
  1115  0779  2FE5               	goto	l133
  1116  077A                     u510:	
  1117  077A                     l1281:	
  1118                           
  1119                           ;SW.c: 123:                 SW_DATA[sw].state = SW_PRESSED;
  1120  077A  3002               	movlw	2
  1121  077B  00F4               	movwf	??_SW_UpdateState
  1122  077C  3003               	movlw	3
  1123  077D  00F5               	movwf	??_SW_UpdateState+1
  1124  077E  0875               	movf	??_SW_UpdateState+1,w
  1125  077F  00F0               	movwf	___bmul@multiplicand
  1126  0780  0877               	movf	SW_UpdateState@sw,w
  1127  0781  120A  118A  2428  120A  118A  	fcall	___bmul
  1128  0786  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1129  0787  0084               	movwf	4
  1130  0788  0874               	movf	??_SW_UpdateState,w
  1131  0789  1383               	bcf	3,7	;select IRP bank0
  1132  078A  0080               	movwf	0
  1133  078B  2FE5               	goto	l133
  1134  078C                     l1283:	
  1135                           
  1136                           ;SW.c: 126:             if(SW_DATA[sw].samples[0] == 1 && SW_DATA[sw].samples[1] == 1)
  1137  078C  3003               	movlw	3
  1138  078D  00F4               	movwf	??_SW_UpdateState
  1139  078E  0874               	movf	??_SW_UpdateState,w
  1140  078F  00F0               	movwf	___bmul@multiplicand
  1141  0790  0877               	movf	SW_UpdateState@sw,w
  1142  0791  120A  118A  2428  120A  118A  	fcall	___bmul
  1143  0796  3E20               	addlw	(low (_SW_DATA| 0))& (0+255)
  1144  0797  0084               	movwf	4
  1145  0798  1383               	bcf	3,7	;select IRP bank0
  1146  0799  0300               	decf	0,w
  1147  079A  1D03               	btfss	3,2
  1148  079B  2F9D               	goto	u521
  1149  079C  2F9E               	goto	u520
  1150  079D                     u521:	
  1151  079D  2FE5               	goto	l133
  1152  079E                     u520:	
  1153  079E                     l1285:	
  1154  079E  3003               	movlw	3
  1155  079F  00F4               	movwf	??_SW_UpdateState
  1156  07A0  0874               	movf	??_SW_UpdateState,w
  1157  07A1  00F0               	movwf	___bmul@multiplicand
  1158  07A2  0877               	movf	SW_UpdateState@sw,w
  1159  07A3  120A  118A  2428  120A  118A  	fcall	___bmul
  1160  07A8  3E21               	addlw	(low ((_SW_DATA| 0+1)))& (0+255)
  1161  07A9  0084               	movwf	4
  1162  07AA  1383               	bcf	3,7	;select IRP bank0
  1163  07AB  0300               	decf	0,w
  1164  07AC  1D03               	btfss	3,2
  1165  07AD  2FAF               	goto	u531
  1166  07AE  2FB0               	goto	u530
  1167  07AF                     u531:	
  1168  07AF  2FE5               	goto	l133
  1169  07B0                     u530:	
  1170  07B0                     l1287:	
  1171                           
  1172                           ;SW.c: 127:                 SW_DATA[sw].state = SW_PRE_RELEASED;
  1173  07B0  3003               	movlw	3
  1174  07B1  00F4               	movwf	??_SW_UpdateState
  1175  07B2  3003               	movlw	3
  1176  07B3  00F5               	movwf	??_SW_UpdateState+1
  1177  07B4  0875               	movf	??_SW_UpdateState+1,w
  1178  07B5  00F0               	movwf	___bmul@multiplicand
  1179  07B6  0877               	movf	SW_UpdateState@sw,w
  1180  07B7  120A  118A  2428  120A  118A  	fcall	___bmul
  1181  07BC  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1182  07BD  0084               	movwf	4
  1183  07BE  0874               	movf	??_SW_UpdateState,w
  1184  07BF  1383               	bcf	3,7	;select IRP bank0
  1185  07C0  0080               	movwf	0
  1186  07C1  2FE5               	goto	l133
  1187  07C2                     l1291:	
  1188  07C2  3003               	movlw	3
  1189  07C3  00F4               	movwf	??_SW_UpdateState
  1190  07C4  0874               	movf	??_SW_UpdateState,w
  1191  07C5  00F0               	movwf	___bmul@multiplicand
  1192  07C6  0877               	movf	SW_UpdateState@sw,w
  1193  07C7  120A  118A  2428  120A  118A  	fcall	___bmul
  1194  07CC  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  1195  07CD  0084               	movwf	4
  1196  07CE  1383               	bcf	3,7	;select IRP bank0
  1197  07CF  0800               	movf	0,w
  1198  07D0  00F5               	movwf	??_SW_UpdateState+1
  1199  07D1  01F6               	clrf	??_SW_UpdateState+2
  1200                           
  1201                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1202                           ; Switch size 1, requested type "simple"
  1203                           ; Number of cases is 1, Range of values is 0 to 0
  1204                           ; switch strategies available:
  1205                           ; Name         Instructions Cycles
  1206                           ; simple_byte            4     3 (average)
  1207                           ; direct_byte           11     8 (fixed)
  1208                           ; jumptable            260     6 (fixed)
  1209                           ;	Chosen strategy is simple_byte
  1210  07D2  0876               	movf	??_SW_UpdateState+2,w
  1211  07D3  3A00               	xorlw	0	; case 0
  1212  07D4  1903               	skipnz
  1213  07D5  2FD7               	goto	l1561
  1214  07D6  2FE5               	goto	l133
  1215  07D7                     l1561:	
  1216                           
  1217                           ; Switch size 1, requested type "simple"
  1218                           ; Number of cases is 4, Range of values is 0 to 3
  1219                           ; switch strategies available:
  1220                           ; Name         Instructions Cycles
  1221                           ; simple_byte           13     7 (average)
  1222                           ; direct_byte           20     8 (fixed)
  1223                           ; jumptable            260     6 (fixed)
  1224                           ;	Chosen strategy is simple_byte
  1225  07D7  0875               	movf	??_SW_UpdateState+1,w
  1226  07D8  3A00               	xorlw	0	; case 0
  1227  07D9  1903               	skipnz
  1228  07DA  2F22               	goto	l1271
  1229  07DB  3A01               	xorlw	1	; case 1
  1230  07DC  1903               	skipnz
  1231  07DD  2F56               	goto	l1277
  1232  07DE  3A03               	xorlw	3	; case 2
  1233  07DF  1903               	skipnz
  1234  07E0  2F8C               	goto	l1283
  1235  07E1  3A01               	xorlw	1	; case 3
  1236  07E2  1903               	skipnz
  1237  07E3  2EEF               	goto	l1265
  1238  07E4  2FE5               	goto	l133
  1239  07E5                     l133:	
  1240  07E5  0008               	return
  1241  07E6                     __end_of_SW_UpdateState:	
  1242                           
  1243                           	psect	text3
  1244  0461                     __ptext3:	
  1245 ;; *************** function _SSD_Update *****************
  1246 ;; Defined at:
  1247 ;;		line 77 in file "SSD.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;		None
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;		None
  1252 ;; Return value:  Size  Location     Type
  1253 ;;                  1    wreg      void 
  1254 ;; Registers used:
  1255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1261 ;;      Params:         0       0       0       0       0
  1262 ;;      Locals:         0       0       0       0       0
  1263 ;;      Temps:          1       0       0       0       0
  1264 ;;      Totals:         1       0       0       0       0
  1265 ;;Total ram usage:        1 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    1
  1268 ;; This function calls:
  1269 ;;		_SSD_Disable
  1270 ;;		_SSD_Enable
  1271 ;; This function is called by:
  1272 ;;		_main
  1273 ;; This function uses a non-reentrant model
  1274 ;;
  1275                           
  1276                           
  1277                           ;psect for function _SSD_Update
  1278  0461                     _SSD_Update:	
  1279  0461                     l1407:	
  1280                           ;incstack = 0
  1281                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1282                           
  1283                           
  1284                           ;SSD.c: 83:     SSD_Disable(currentSSD);
  1285  0461  1283               	bcf	3,5	;RP0=0, select bank0
  1286  0462  1303               	bcf	3,6	;RP1=0, select bank0
  1287  0463  082E               	movf	_currentSSD,w
  1288  0464  120A  118A  2486  120A  118A  	fcall	_SSD_Disable
  1289  0469                     l1409:	
  1290                           
  1291                           ;SSD.c: 85:     currentSSD++;
  1292  0469  3001               	movlw	1
  1293  046A  00F3               	movwf	??_SSD_Update
  1294  046B  0873               	movf	??_SSD_Update,w
  1295  046C  1283               	bcf	3,5	;RP0=0, select bank0
  1296  046D  1303               	bcf	3,6	;RP1=0, select bank0
  1297  046E  07AE               	addwf	_currentSSD,f
  1298  046F                     l1411:	
  1299                           
  1300                           ;SSD.c: 86:     if(currentSSD > SSD_HOURS_TENS)currentSSD = 0;
  1301  046F  3004               	movlw	4
  1302  0470  022E               	subwf	_currentSSD,w
  1303  0471  1C03               	skipc
  1304  0472  2C74               	goto	u601
  1305  0473  2C75               	goto	u600
  1306  0474                     u601:	
  1307  0474  2C76               	goto	l1415
  1308  0475                     u600:	
  1309  0475                     l1413:	
  1310  0475  01AE               	clrf	_currentSSD
  1311  0476                     l1415:	
  1312                           
  1313                           ;SSD.c: 88:     (((PORTD))=(SSD_LOT_ARR[Buffer[currentSSD]]));
  1314  0476  082E               	movf	_currentSSD,w
  1315  0477  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  1316  0478  0084               	movwf	4
  1317  0479  1383               	bcf	3,7	;select IRP bank0
  1318  047A  0800               	movf	0,w
  1319  047B  3E33               	addlw	(low (_SSD_LOT_ARR| 0))& (0+255)
  1320  047C  0084               	movwf	4
  1321  047D  0800               	movf	0,w
  1322  047E  0088               	movwf	8	;volatile
  1323  047F                     l1417:	
  1324                           
  1325                           ;SSD.c: 90:     SSD_Enable(currentSSD);
  1326  047F  082E               	movf	_currentSSD,w
  1327  0480  120A  118A  24B7  120A  118A  	fcall	_SSD_Enable
  1328  0485                     l80:	
  1329  0485  0008               	return
  1330  0486                     __end_of_SSD_Update:	
  1331                           
  1332                           	psect	text4
  1333  04B7                     __ptext4:	
  1334 ;; *************** function _SSD_Enable *****************
  1335 ;; Defined at:
  1336 ;;		line 114 in file "SSD.c"
  1337 ;; Parameters:    Size  Location     Type
  1338 ;;  s               1    wreg     enum E872
  1339 ;; Auto vars:     Size  Location     Type
  1340 ;;  s               1    2[COMMON] enum E872
  1341 ;; Return value:  Size  Location     Type
  1342 ;;                  1    wreg      void 
  1343 ;; Registers used:
  1344 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1345 ;; Tracked objects:
  1346 ;;		On entry : 0/0
  1347 ;;		On exit  : 0/0
  1348 ;;		Unchanged: 0/0
  1349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1350 ;;      Params:         0       0       0       0       0
  1351 ;;      Locals:         1       0       0       0       0
  1352 ;;      Temps:          2       0       0       0       0
  1353 ;;      Totals:         3       0       0       0       0
  1354 ;;Total ram usage:        3 bytes
  1355 ;; Hardware stack levels used:    1
  1356 ;; This function calls:
  1357 ;;		Nothing
  1358 ;; This function is called by:
  1359 ;;		_SSD_Update
  1360 ;; This function uses a non-reentrant model
  1361 ;;
  1362                           
  1363                           
  1364                           ;psect for function _SSD_Enable
  1365  04B7                     _SSD_Enable:	
  1366                           
  1367                           ;incstack = 0
  1368                           ; Regs used in _SSD_Enable: [wreg-fsr0h+status,2+status,0]
  1369                           ;SSD_Enable@s stored from wreg
  1370  04B7  00F2               	movwf	SSD_Enable@s
  1371  04B8                     l1247:	
  1372                           
  1373                           ;SSD.c: 114: void SSD_Enable(SSD_t s);SSD.c: 115: {;SSD.c: 116:     switch(s)
  1374  04B8  2CD5               	goto	l1257
  1375  04B9                     l1249:	
  1376                           
  1377                           ;SSD.c: 119:             (((PORTB))=((PORTB) & ~(1<<(4)))|(SSD_ON<<(4)));
  1378  04B9  1283               	bcf	3,5	;RP0=0, select bank0
  1379  04BA  1303               	bcf	3,6	;RP1=0, select bank0
  1380  04BB  0806               	movf	6,w	;volatile
  1381  04BC  39EF               	andlw	239
  1382  04BD  3810               	iorlw	16
  1383  04BE  0086               	movwf	6	;volatile
  1384                           
  1385                           ;SSD.c: 120:             break;
  1386  04BF  2CEB               	goto	l100
  1387  04C0                     l1251:	
  1388                           
  1389                           ;SSD.c: 122:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_ON<<(5)));
  1390  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  1391  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  1392  04C2  0806               	movf	6,w	;volatile
  1393  04C3  39DF               	andlw	223
  1394  04C4  3820               	iorlw	32
  1395  04C5  0086               	movwf	6	;volatile
  1396                           
  1397                           ;SSD.c: 123:             break;
  1398  04C6  2CEB               	goto	l100
  1399  04C7                     l1253:	
  1400                           
  1401                           ;SSD.c: 125:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_ON<<(6)));
  1402  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1403  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1404  04C9  0806               	movf	6,w	;volatile
  1405  04CA  39BF               	andlw	191
  1406  04CB  3840               	iorlw	64
  1407  04CC  0086               	movwf	6	;volatile
  1408                           
  1409                           ;SSD.c: 126:             break;
  1410  04CD  2CEB               	goto	l100
  1411  04CE                     l1255:	
  1412                           
  1413                           ;SSD.c: 128:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_ON<<(7)));
  1414  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  1415  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  1416  04D0  0806               	movf	6,w	;volatile
  1417  04D1  397F               	andlw	127
  1418  04D2  3880               	iorlw	128
  1419  04D3  0086               	movwf	6	;volatile
  1420                           
  1421                           ;SSD.c: 129:             break;
  1422  04D4  2CEB               	goto	l100
  1423  04D5                     l1257:	
  1424  04D5  0872               	movf	SSD_Enable@s,w
  1425  04D6  00F0               	movwf	??_SSD_Enable
  1426  04D7  01F1               	clrf	??_SSD_Enable+1
  1427                           
  1428                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1429                           ; Switch size 1, requested type "simple"
  1430                           ; Number of cases is 1, Range of values is 0 to 0
  1431                           ; switch strategies available:
  1432                           ; Name         Instructions Cycles
  1433                           ; simple_byte            4     3 (average)
  1434                           ; direct_byte           11     8 (fixed)
  1435                           ; jumptable            260     6 (fixed)
  1436                           ;	Chosen strategy is simple_byte
  1437  04D8  0871               	movf	??_SSD_Enable+1,w
  1438  04D9  3A00               	xorlw	0	; case 0
  1439  04DA  1903               	skipnz
  1440  04DB  2CDD               	goto	l1563
  1441  04DC  2CEB               	goto	l100
  1442  04DD                     l1563:	
  1443                           
  1444                           ; Switch size 1, requested type "simple"
  1445                           ; Number of cases is 4, Range of values is 0 to 3
  1446                           ; switch strategies available:
  1447                           ; Name         Instructions Cycles
  1448                           ; simple_byte           13     7 (average)
  1449                           ; direct_byte           20     8 (fixed)
  1450                           ; jumptable            260     6 (fixed)
  1451                           ;	Chosen strategy is simple_byte
  1452  04DD  0870               	movf	??_SSD_Enable,w
  1453  04DE  3A00               	xorlw	0	; case 0
  1454  04DF  1903               	skipnz
  1455  04E0  2CB9               	goto	l1249
  1456  04E1  3A01               	xorlw	1	; case 1
  1457  04E2  1903               	skipnz
  1458  04E3  2CC0               	goto	l1251
  1459  04E4  3A03               	xorlw	3	; case 2
  1460  04E5  1903               	skipnz
  1461  04E6  2CC7               	goto	l1253
  1462  04E7  3A01               	xorlw	1	; case 3
  1463  04E8  1903               	skipnz
  1464  04E9  2CCE               	goto	l1255
  1465  04EA  2CEB               	goto	l100
  1466  04EB                     l100:	
  1467  04EB  0008               	return
  1468  04EC                     __end_of_SSD_Enable:	
  1469                           
  1470                           	psect	text5
  1471  0486                     __ptext5:	
  1472 ;; *************** function _SSD_Disable *****************
  1473 ;; Defined at:
  1474 ;;		line 93 in file "SSD.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;  s               1    wreg     enum E872
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;  s               1    2[COMMON] enum E872
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1488 ;;      Params:         0       0       0       0       0
  1489 ;;      Locals:         1       0       0       0       0
  1490 ;;      Temps:          2       0       0       0       0
  1491 ;;      Totals:         3       0       0       0       0
  1492 ;;Total ram usage:        3 bytes
  1493 ;; Hardware stack levels used:    1
  1494 ;; This function calls:
  1495 ;;		Nothing
  1496 ;; This function is called by:
  1497 ;;		_SSD_Update
  1498 ;; This function uses a non-reentrant model
  1499 ;;
  1500                           
  1501                           
  1502                           ;psect for function _SSD_Disable
  1503  0486                     _SSD_Disable:	
  1504                           
  1505                           ;incstack = 0
  1506                           ; Regs used in _SSD_Disable: [wreg-fsr0h+status,2+status,0]
  1507                           ;SSD_Disable@s stored from wreg
  1508  0486  00F2               	movwf	SSD_Disable@s
  1509  0487                     l1231:	
  1510                           
  1511                           ;SSD.c: 93: void SSD_Disable(SSD_t s);SSD.c: 94: {;SSD.c: 95:     switch(s)
  1512  0487  2CA0               	goto	l1241
  1513  0488                     l1233:	
  1514                           
  1515                           ;SSD.c: 98:             (((PORTB))=((PORTB) & ~(1<<(4)))|(SSD_OFF<<(4)));
  1516  0488  1283               	bcf	3,5	;RP0=0, select bank0
  1517  0489  1303               	bcf	3,6	;RP1=0, select bank0
  1518  048A  0806               	movf	6,w	;volatile
  1519  048B  39EF               	andlw	239
  1520  048C  0086               	movwf	6	;volatile
  1521                           
  1522                           ;SSD.c: 99:             break;
  1523  048D  2CB6               	goto	l90
  1524  048E                     l1235:	
  1525                           
  1526                           ;SSD.c: 101:             (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  1527  048E  1283               	bcf	3,5	;RP0=0, select bank0
  1528  048F  1303               	bcf	3,6	;RP1=0, select bank0
  1529  0490  0806               	movf	6,w	;volatile
  1530  0491  39DF               	andlw	223
  1531  0492  0086               	movwf	6	;volatile
  1532                           
  1533                           ;SSD.c: 102:             break;
  1534  0493  2CB6               	goto	l90
  1535  0494                     l1237:	
  1536                           
  1537                           ;SSD.c: 104:             (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  1538  0494  1283               	bcf	3,5	;RP0=0, select bank0
  1539  0495  1303               	bcf	3,6	;RP1=0, select bank0
  1540  0496  0806               	movf	6,w	;volatile
  1541  0497  39BF               	andlw	191
  1542  0498  0086               	movwf	6	;volatile
  1543                           
  1544                           ;SSD.c: 105:             break;
  1545  0499  2CB6               	goto	l90
  1546  049A                     l1239:	
  1547                           
  1548                           ;SSD.c: 107:             (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  1549  049A  1283               	bcf	3,5	;RP0=0, select bank0
  1550  049B  1303               	bcf	3,6	;RP1=0, select bank0
  1551  049C  0806               	movf	6,w	;volatile
  1552  049D  397F               	andlw	127
  1553  049E  0086               	movwf	6	;volatile
  1554                           
  1555                           ;SSD.c: 108:             break;
  1556  049F  2CB6               	goto	l90
  1557  04A0                     l1241:	
  1558  04A0  0872               	movf	SSD_Disable@s,w
  1559  04A1  00F0               	movwf	??_SSD_Disable
  1560  04A2  01F1               	clrf	??_SSD_Disable+1
  1561                           
  1562                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1563                           ; Switch size 1, requested type "simple"
  1564                           ; Number of cases is 1, Range of values is 0 to 0
  1565                           ; switch strategies available:
  1566                           ; Name         Instructions Cycles
  1567                           ; simple_byte            4     3 (average)
  1568                           ; direct_byte           11     8 (fixed)
  1569                           ; jumptable            260     6 (fixed)
  1570                           ;	Chosen strategy is simple_byte
  1571  04A3  0871               	movf	??_SSD_Disable+1,w
  1572  04A4  3A00               	xorlw	0	; case 0
  1573  04A5  1903               	skipnz
  1574  04A6  2CA8               	goto	l1565
  1575  04A7  2CB6               	goto	l90
  1576  04A8                     l1565:	
  1577                           
  1578                           ; Switch size 1, requested type "simple"
  1579                           ; Number of cases is 4, Range of values is 0 to 3
  1580                           ; switch strategies available:
  1581                           ; Name         Instructions Cycles
  1582                           ; simple_byte           13     7 (average)
  1583                           ; direct_byte           20     8 (fixed)
  1584                           ; jumptable            260     6 (fixed)
  1585                           ;	Chosen strategy is simple_byte
  1586  04A8  0870               	movf	??_SSD_Disable,w
  1587  04A9  3A00               	xorlw	0	; case 0
  1588  04AA  1903               	skipnz
  1589  04AB  2C88               	goto	l1233
  1590  04AC  3A01               	xorlw	1	; case 1
  1591  04AD  1903               	skipnz
  1592  04AE  2C8E               	goto	l1235
  1593  04AF  3A03               	xorlw	3	; case 2
  1594  04B0  1903               	skipnz
  1595  04B1  2C94               	goto	l1237
  1596  04B2  3A01               	xorlw	1	; case 3
  1597  04B3  1903               	skipnz
  1598  04B4  2C9A               	goto	l1239
  1599  04B5  2CB6               	goto	l90
  1600  04B6                     l90:	
  1601  04B6  0008               	return
  1602  04B7                     __end_of_SSD_Disable:	
  1603                           
  1604                           	psect	text6
  1605  03EC                     __ptext6:	
  1606 ;; *************** function _SSD_Set_Symbol *****************
  1607 ;; Defined at:
  1608 ;;		line 72 in file "SSD.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  symbol          1    wreg     enum E859
  1611 ;;  index           1    0[COMMON] enum E872
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  symbol          1    2[COMMON] enum E859
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         1       0       0       0       0
  1624 ;;      Locals:         1       0       0       0       0
  1625 ;;      Temps:          1       0       0       0       0
  1626 ;;      Totals:         3       0       0       0       0
  1627 ;;Total ram usage:        3 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; This function calls:
  1630 ;;		Nothing
  1631 ;; This function is called by:
  1632 ;;		_main
  1633 ;; This function uses a non-reentrant model
  1634 ;;
  1635                           
  1636                           
  1637                           ;psect for function _SSD_Set_Symbol
  1638  03EC                     _SSD_Set_Symbol:	
  1639                           
  1640                           ;incstack = 0
  1641                           ; Regs used in _SSD_Set_Symbol: [wreg-fsr0h+status,2+status,0]
  1642                           ;SSD_Set_Symbol@symbol stored from wreg
  1643  03EC  00F2               	movwf	SSD_Set_Symbol@symbol
  1644  03ED                     l1353:	
  1645                           
  1646                           ;SSD.c: 72: void SSD_Set_Symbol(SSD_Symbol_t symbol,SSD_t index);SSD.c: 73: {;SSD.c: 75:
      +                               Buffer[index] = symbol;
  1647  03ED  0872               	movf	SSD_Set_Symbol@symbol,w
  1648  03EE  00F1               	movwf	??_SSD_Set_Symbol
  1649  03EF  0870               	movf	SSD_Set_Symbol@index,w
  1650  03F0  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  1651  03F1  0084               	movwf	4
  1652  03F2  0871               	movf	??_SSD_Set_Symbol,w
  1653  03F3  1383               	bcf	3,7	;select IRP bank0
  1654  03F4  0080               	movwf	0
  1655  03F5                     l76:	
  1656  03F5  0008               	return
  1657  03F6                     __end_of_SSD_Set_Symbol:	
  1658                           
  1659                           	psect	text7
  1660  0679                     __ptext7:	
  1661 ;; *************** function _SSD_Init *****************
  1662 ;; Defined at:
  1663 ;;		line 50 in file "SSD.c"
  1664 ;; Parameters:    Size  Location     Type
  1665 ;;		None
  1666 ;; Auto vars:     Size  Location     Type
  1667 ;;  i               2    9[COMMON] int 
  1668 ;; Return value:  Size  Location     Type
  1669 ;;                  1    wreg      void 
  1670 ;; Registers used:
  1671 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1672 ;; Tracked objects:
  1673 ;;		On entry : 0/0
  1674 ;;		On exit  : 0/0
  1675 ;;		Unchanged: 0/0
  1676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1677 ;;      Params:         0       0       0       0       0
  1678 ;;      Locals:         2       0       0       0       0
  1679 ;;      Temps:          1       0       0       0       0
  1680 ;;      Totals:         3       0       0       0       0
  1681 ;;Total ram usage:        3 bytes
  1682 ;; Hardware stack levels used:    1
  1683 ;; Hardware stack levels required when called:    1
  1684 ;; This function calls:
  1685 ;;		_GPIO_Init_Pin
  1686 ;;		_GPIO_Init_Port
  1687 ;; This function is called by:
  1688 ;;		_main
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691                           
  1692                           
  1693                           ;psect for function _SSD_Init
  1694  0679                     _SSD_Init:	
  1695  0679                     l1327:	
  1696                           ;incstack = 0
  1697                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1698                           
  1699                           
  1700                           ;SSD.c: 52:     int i = 0;
  1701  0679  01F9               	clrf	SSD_Init@i
  1702  067A  01FA               	clrf	SSD_Init@i+1
  1703  067B                     l1329:	
  1704                           
  1705                           ;SSD.c: 54:     GPIO_Init_Port(&(TRISD),(0));
  1706  067B  3088               	movlw	136
  1707  067C  00F0               	movwf	GPIO_Init_Port@DirRegAddress
  1708  067D  3000               	movlw	0
  1709  067E  00F1               	movwf	GPIO_Init_Port@DirRegAddress+1
  1710  067F  01F2               	clrf	GPIO_Init_Port@dir
  1711  0680  120A  118A  2574  120A  118A  	fcall	_GPIO_Init_Port
  1712  0685                     l1335:	
  1713                           
  1714                           ;SSD.c: 56:     {;SSD.c: 57:         Buffer[i] = SSD_NULL;
  1715  0685  300A               	movlw	10
  1716  0686  00F8               	movwf	??_SSD_Init
  1717  0687  0879               	movf	SSD_Init@i,w
  1718  0688  3E29               	addlw	(low (_Buffer| 0))& (0+255)
  1719  0689  0084               	movwf	4
  1720  068A  0878               	movf	??_SSD_Init,w
  1721  068B  1383               	bcf	3,7	;select IRP bank0
  1722  068C  0080               	movwf	0
  1723  068D                     l1337:	
  1724                           
  1725                           ;SSD.c: 58:     }
  1726  068D  3001               	movlw	1
  1727  068E  07F9               	addwf	SSD_Init@i,f
  1728  068F  1803               	skipnc
  1729  0690  0AFA               	incf	SSD_Init@i+1,f
  1730  0691  3000               	movlw	0
  1731  0692  07FA               	addwf	SSD_Init@i+1,f
  1732  0693                     l1339:	
  1733  0693  087A               	movf	SSD_Init@i+1,w
  1734  0694  3A80               	xorlw	128
  1735  0695  00FF               	movwf	btemp+1
  1736  0696  3080               	movlw	128
  1737  0697  027F               	subwf	btemp+1,w
  1738  0698  1D03               	skipz
  1739  0699  2E9C               	goto	u565
  1740  069A  3004               	movlw	4
  1741  069B  0279               	subwf	SSD_Init@i,w
  1742  069C                     u565:	
  1743  069C  1C03               	skipc
  1744  069D  2E9F               	goto	u561
  1745  069E  2EA0               	goto	u560
  1746  069F                     u561:	
  1747  069F  2E85               	goto	l1335
  1748  06A0                     u560:	
  1749  06A0                     l1341:	
  1750                           
  1751                           ;SSD.c: 60:     GPIO_Init_Pin(&(TRISB),(4),(0));
  1752  06A0  3086               	movlw	134
  1753  06A1  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1754  06A2  3000               	movlw	0
  1755  06A3  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1756  06A4  3004               	movlw	4
  1757  06A5  00F8               	movwf	??_SSD_Init
  1758  06A6  0878               	movf	??_SSD_Init,w
  1759  06A7  00F2               	movwf	GPIO_Init_Pin@pin_number
  1760  06A8  01F3               	clrf	GPIO_Init_Pin@dir
  1761  06A9  120A  118A  261B  120A  118A  	fcall	_GPIO_Init_Pin
  1762  06AE                     l1343:	
  1763                           
  1764                           ;SSD.c: 61:     (((PORTB))=((PORTB) & ~(1<<(4)))|(SSD_OFF<<(4)));
  1765  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1766  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1767  06B0  0806               	movf	6,w	;volatile
  1768  06B1  39EF               	andlw	239
  1769  06B2  0086               	movwf	6	;volatile
  1770  06B3                     l1345:	
  1771                           
  1772                           ;SSD.c: 63:     GPIO_Init_Pin(&(TRISB),(5),(0));
  1773  06B3  3086               	movlw	134
  1774  06B4  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1775  06B5  3000               	movlw	0
  1776  06B6  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1777  06B7  3005               	movlw	5
  1778  06B8  00F8               	movwf	??_SSD_Init
  1779  06B9  0878               	movf	??_SSD_Init,w
  1780  06BA  00F2               	movwf	GPIO_Init_Pin@pin_number
  1781  06BB  01F3               	clrf	GPIO_Init_Pin@dir
  1782  06BC  120A  118A  261B  120A  118A  	fcall	_GPIO_Init_Pin
  1783                           
  1784                           ;SSD.c: 64:     (((PORTB))=((PORTB) & ~(1<<(5)))|(SSD_OFF<<(5)));
  1785  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  1786  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  1787  06C3  0806               	movf	6,w	;volatile
  1788  06C4  39DF               	andlw	223
  1789  06C5  0086               	movwf	6	;volatile
  1790  06C6                     l1347:	
  1791                           
  1792                           ;SSD.c: 66:     GPIO_Init_Pin(&(TRISB),(6),(0));
  1793  06C6  3086               	movlw	134
  1794  06C7  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1795  06C8  3000               	movlw	0
  1796  06C9  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1797  06CA  3006               	movlw	6
  1798  06CB  00F8               	movwf	??_SSD_Init
  1799  06CC  0878               	movf	??_SSD_Init,w
  1800  06CD  00F2               	movwf	GPIO_Init_Pin@pin_number
  1801  06CE  01F3               	clrf	GPIO_Init_Pin@dir
  1802  06CF  120A  118A  261B  120A  118A  	fcall	_GPIO_Init_Pin
  1803  06D4                     l1349:	
  1804                           
  1805                           ;SSD.c: 67:     (((PORTB))=((PORTB) & ~(1<<(6)))|(SSD_OFF<<(6)));
  1806  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  1807  06D5  1303               	bcf	3,6	;RP1=0, select bank0
  1808  06D6  0806               	movf	6,w	;volatile
  1809  06D7  39BF               	andlw	191
  1810  06D8  0086               	movwf	6	;volatile
  1811                           
  1812                           ;SSD.c: 69:     GPIO_Init_Pin(&(TRISB),(7),(0));
  1813  06D9  3086               	movlw	134
  1814  06DA  00F0               	movwf	GPIO_Init_Pin@DirRegAddress
  1815  06DB  3000               	movlw	0
  1816  06DC  00F1               	movwf	GPIO_Init_Pin@DirRegAddress+1
  1817  06DD  3007               	movlw	7
  1818  06DE  00F8               	movwf	??_SSD_Init
  1819  06DF  0878               	movf	??_SSD_Init,w
  1820  06E0  00F2               	movwf	GPIO_Init_Pin@pin_number
  1821  06E1  01F3               	clrf	GPIO_Init_Pin@dir
  1822  06E2  120A  118A  261B  120A  118A  	fcall	_GPIO_Init_Pin
  1823  06E7                     l1351:	
  1824                           
  1825                           ;SSD.c: 70:     (((PORTB))=((PORTB) & ~(1<<(7)))|(SSD_OFF<<(7)));
  1826  06E7  1283               	bcf	3,5	;RP0=0, select bank0
  1827  06E8  1303               	bcf	3,6	;RP1=0, select bank0
  1828  06E9  0806               	movf	6,w	;volatile
  1829  06EA  397F               	andlw	127
  1830  06EB  0086               	movwf	6	;volatile
  1831  06EC                     l73:	
  1832  06EC  0008               	return
  1833  06ED                     __end_of_SSD_Init:	
  1834                           
  1835                           	psect	text8
  1836  0574                     __ptext8:	
  1837 ;; *************** function _GPIO_Init_Port *****************
  1838 ;; Defined at:
  1839 ;;		line 14 in file "GPIO.c"
  1840 ;; Parameters:    Size  Location     Type
  1841 ;;  DirRegAddres    2    0[COMMON] PTR unsigned char 
  1842 ;;		 -> TRISD(1), 
  1843 ;;  dir             1    2[COMMON] unsigned char 
  1844 ;; Auto vars:     Size  Location     Type
  1845 ;;  ret             1    0        unsigned char 
  1846 ;; Return value:  Size  Location     Type
  1847 ;;                  1    wreg      unsigned char 
  1848 ;; Registers used:
  1849 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1850 ;; Tracked objects:
  1851 ;;		On entry : 0/0
  1852 ;;		On exit  : 0/0
  1853 ;;		Unchanged: 0/0
  1854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1855 ;;      Params:         3       0       0       0       0
  1856 ;;      Locals:         3       0       0       0       0
  1857 ;;      Temps:          1       0       0       0       0
  1858 ;;      Totals:         7       0       0       0       0
  1859 ;;Total ram usage:        7 bytes
  1860 ;; Hardware stack levels used:    1
  1861 ;; This function calls:
  1862 ;;		Nothing
  1863 ;; This function is called by:
  1864 ;;		_SSD_Init
  1865 ;; This function uses a non-reentrant model
  1866 ;;
  1867                           
  1868                           
  1869                           ;psect for function _GPIO_Init_Port
  1870  0574                     _GPIO_Init_Port:	
  1871  0574                     l1189:	
  1872                           ;incstack = 0
  1873                           ; Regs used in _GPIO_Init_Port: [wreg-fsr0h+status,2+status,0]
  1874                           
  1875  0574                     l1191:	
  1876                           
  1877                           ;GPIO.c: 18:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  1878  0574  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1879  0575  0084               	movwf	4
  1880  0576  1783               	bsf	3,7
  1881  0577  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1882  0578  1383               	bcf	3,7
  1883  0579  0800               	movf	0,w
  1884  057A  1683               	bsf	3,5	;RP0=1, select bank1
  1885  057B  1303               	bcf	3,6	;RP1=0, select bank1
  1886  057C  0605               	xorwf	5,w	;volatile
  1887  057D  1903               	skipnz
  1888  057E  2D80               	goto	u331
  1889  057F  2D81               	goto	u330
  1890  0580                     u331:	
  1891  0580  2DAE               	goto	l1203
  1892  0581                     u330:	
  1893  0581                     l1193:	
  1894  0581  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1895  0582  0084               	movwf	4
  1896  0583  1783               	bsf	3,7
  1897  0584  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1898  0585  1383               	bcf	3,7
  1899  0586  0800               	movf	0,w
  1900  0587  0606               	xorwf	6,w	;volatile
  1901  0588  1903               	skipnz
  1902  0589  2D8B               	goto	u341
  1903  058A  2D8C               	goto	u340
  1904  058B                     u341:	
  1905  058B  2DAE               	goto	l1203
  1906  058C                     u340:	
  1907  058C                     l1195:	
  1908  058C  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1909  058D  0084               	movwf	4
  1910  058E  1783               	bsf	3,7
  1911  058F  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1912  0590  1383               	bcf	3,7
  1913  0591  0800               	movf	0,w
  1914  0592  0607               	xorwf	7,w	;volatile
  1915  0593  1903               	skipnz
  1916  0594  2D96               	goto	u351
  1917  0595  2D97               	goto	u350
  1918  0596                     u351:	
  1919  0596  2DAE               	goto	l1203
  1920  0597                     u350:	
  1921  0597                     l1197:	
  1922  0597  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1923  0598  0084               	movwf	4
  1924  0599  1783               	bsf	3,7
  1925  059A  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1926  059B  1383               	bcf	3,7
  1927  059C  0800               	movf	0,w
  1928  059D  0608               	xorwf	8,w	;volatile
  1929  059E  1903               	skipnz
  1930  059F  2DA1               	goto	u361
  1931  05A0  2DA2               	goto	u360
  1932  05A1                     u361:	
  1933  05A1  2DAE               	goto	l1203
  1934  05A2                     u360:	
  1935  05A2                     l1199:	
  1936  05A2  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1937  05A3  0084               	movwf	4
  1938  05A4  1783               	bsf	3,7
  1939  05A5  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1940  05A6  1383               	bcf	3,7
  1941  05A7  0800               	movf	0,w
  1942  05A8  0609               	xorwf	9,w	;volatile
  1943  05A9  1903               	skipnz
  1944  05AA  2DAC               	goto	u371
  1945  05AB  2DAD               	goto	u370
  1946  05AC                     u371:	
  1947  05AC  2DAE               	goto	l1203
  1948  05AD                     u370:	
  1949  05AD                     l1201:	
  1950                           
  1951                           ;GPIO.c: 24:     }
  1952  05AD  2DC3               	goto	l19
  1953  05AE                     l1203:	
  1954                           
  1955                           ;GPIO.c: 26:     {;GPIO.c: 27:         ((*DirRegAddress)=(dir)?(~0):(0));
  1956  05AE  0872               	movf	GPIO_Init_Port@dir,w
  1957  05AF  1D03               	btfss	3,2
  1958  05B0  2DB2               	goto	u381
  1959  05B1  2DB3               	goto	u380
  1960  05B2                     u381:	
  1961  05B2  2DB6               	goto	l1207
  1962  05B3                     u380:	
  1963  05B3                     l1205:	
  1964  05B3  01F5               	clrf	_GPIO_Init_Port$31
  1965  05B4  01F6               	clrf	_GPIO_Init_Port$31+1
  1966  05B5  2DBA               	goto	l1209
  1967  05B6                     l1207:	
  1968  05B6  30FF               	movlw	255
  1969  05B7  00F5               	movwf	_GPIO_Init_Port$31
  1970  05B8  30FF               	movlw	255
  1971  05B9  00F6               	movwf	_GPIO_Init_Port$31+1
  1972  05BA                     l1209:	
  1973  05BA  0875               	movf	_GPIO_Init_Port$31,w
  1974  05BB  00F3               	movwf	??_GPIO_Init_Port
  1975  05BC  0870               	movf	GPIO_Init_Port@DirRegAddress,w
  1976  05BD  0084               	movwf	4
  1977  05BE  1783               	bsf	3,7
  1978  05BF  1C71               	btfss	GPIO_Init_Port@DirRegAddress+1,0
  1979  05C0  1383               	bcf	3,7
  1980  05C1  0873               	movf	??_GPIO_Init_Port,w
  1981  05C2  0080               	movwf	0
  1982  05C3                     l19:	
  1983  05C3  0008               	return
  1984  05C4                     __end_of_GPIO_Init_Port:	
  1985                           
  1986                           	psect	text9
  1987  061B                     __ptext9:	
  1988 ;; *************** function _GPIO_Init_Pin *****************
  1989 ;; Defined at:
  1990 ;;		line 34 in file "GPIO.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;  DirRegAddres    2    0[COMMON] PTR unsigned char 
  1993 ;;		 -> RAM(512), TRISB(1), 
  1994 ;;  pin_number      1    2[COMMON] unsigned char 
  1995 ;;  dir             1    3[COMMON] unsigned char 
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;  ret             1    0        unsigned char 
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      unsigned char 
  2000 ;; Registers used:
  2001 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2007 ;;      Params:         4       0       0       0       0
  2008 ;;      Locals:         1       0       0       0       0
  2009 ;;      Temps:          3       0       0       0       0
  2010 ;;      Totals:         8       0       0       0       0
  2011 ;;Total ram usage:        8 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; This function calls:
  2014 ;;		Nothing
  2015 ;; This function is called by:
  2016 ;;		_SSD_Init
  2017 ;;		_SW_Init
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           
  2022                           ;psect for function _GPIO_Init_Pin
  2023  061B                     _GPIO_Init_Pin:	
  2024  061B                     l1213:	
  2025                           ;incstack = 0
  2026                           ; Regs used in _GPIO_Init_Pin: [wreg-fsr0h+status,2+status,0]
  2027                           
  2028  061B                     l1215:	
  2029                           
  2030                           ;GPIO.c: 38:     if(*DirRegAddress != (TRISA) && *DirRegAddress != (TRISB) &&
  2031  061B  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2032  061C  0084               	movwf	4
  2033  061D  1783               	bsf	3,7
  2034  061E  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2035  061F  1383               	bcf	3,7
  2036  0620  0800               	movf	0,w
  2037  0621  1683               	bsf	3,5	;RP0=1, select bank1
  2038  0622  1303               	bcf	3,6	;RP1=0, select bank1
  2039  0623  0605               	xorwf	5,w	;volatile
  2040  0624  1903               	skipnz
  2041  0625  2E27               	goto	u391
  2042  0626  2E28               	goto	u390
  2043  0627                     u391:	
  2044  0627  2E55               	goto	l1227
  2045  0628                     u390:	
  2046  0628                     l1217:	
  2047  0628  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2048  0629  0084               	movwf	4
  2049  062A  1783               	bsf	3,7
  2050  062B  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2051  062C  1383               	bcf	3,7
  2052  062D  0800               	movf	0,w
  2053  062E  0606               	xorwf	6,w	;volatile
  2054  062F  1903               	skipnz
  2055  0630  2E32               	goto	u401
  2056  0631  2E33               	goto	u400
  2057  0632                     u401:	
  2058  0632  2E55               	goto	l1227
  2059  0633                     u400:	
  2060  0633                     l1219:	
  2061  0633  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2062  0634  0084               	movwf	4
  2063  0635  1783               	bsf	3,7
  2064  0636  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2065  0637  1383               	bcf	3,7
  2066  0638  0800               	movf	0,w
  2067  0639  0607               	xorwf	7,w	;volatile
  2068  063A  1903               	skipnz
  2069  063B  2E3D               	goto	u411
  2070  063C  2E3E               	goto	u410
  2071  063D                     u411:	
  2072  063D  2E55               	goto	l1227
  2073  063E                     u410:	
  2074  063E                     l1221:	
  2075  063E  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2076  063F  0084               	movwf	4
  2077  0640  1783               	bsf	3,7
  2078  0641  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2079  0642  1383               	bcf	3,7
  2080  0643  0800               	movf	0,w
  2081  0644  0608               	xorwf	8,w	;volatile
  2082  0645  1903               	skipnz
  2083  0646  2E48               	goto	u421
  2084  0647  2E49               	goto	u420
  2085  0648                     u421:	
  2086  0648  2E55               	goto	l1227
  2087  0649                     u420:	
  2088  0649                     l1223:	
  2089  0649  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2090  064A  0084               	movwf	4
  2091  064B  1783               	bsf	3,7
  2092  064C  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2093  064D  1383               	bcf	3,7
  2094  064E  0800               	movf	0,w
  2095  064F  0609               	xorwf	9,w	;volatile
  2096  0650  1903               	skipnz
  2097  0651  2E53               	goto	u431
  2098  0652  2E54               	goto	u430
  2099  0653                     u431:	
  2100  0653  2E55               	goto	l1227
  2101  0654                     u430:	
  2102  0654                     l1225:	
  2103                           
  2104                           ;GPIO.c: 44:     }
  2105  0654  2E78               	goto	l24
  2106  0655                     l1227:	
  2107                           
  2108                           ;GPIO.c: 46:     {;GPIO.c: 47:         ((*DirRegAddress)=(*DirRegAddress & ~(1<<pin_numb
      +                          er))|(dir<<pin_number));
  2109  0655  0873               	movf	GPIO_Init_Pin@dir,w
  2110  0656  00F4               	movwf	??_GPIO_Init_Pin
  2111  0657  0A72               	incf	GPIO_Init_Pin@pin_number,w
  2112  0658  2E5B               	goto	u444
  2113  0659                     u445:	
  2114  0659  1003               	clrc
  2115  065A  0DF4               	rlf	??_GPIO_Init_Pin,f
  2116  065B                     u444:	
  2117  065B  3EFF               	addlw	-1
  2118  065C  1D03               	skipz
  2119  065D  2E59               	goto	u445
  2120  065E  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2121  065F  0084               	movwf	4
  2122  0660  1783               	bsf	3,7
  2123  0661  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2124  0662  1383               	bcf	3,7
  2125  0663  3001               	movlw	1
  2126  0664  00F5               	movwf	??_GPIO_Init_Pin+1
  2127  0665  0A72               	incf	GPIO_Init_Pin@pin_number,w
  2128  0666  2E69               	goto	u454
  2129  0667                     u455:	
  2130  0667  1003               	clrc
  2131  0668  0DF5               	rlf	??_GPIO_Init_Pin+1,f
  2132  0669                     u454:	
  2133  0669  3EFF               	addlw	-1
  2134  066A  1D03               	skipz
  2135  066B  2E67               	goto	u455
  2136  066C  0875               	movf	??_GPIO_Init_Pin+1,w
  2137  066D  3AFF               	xorlw	255
  2138  066E  0500               	andwf	0,w
  2139  066F  0474               	iorwf	??_GPIO_Init_Pin,w
  2140  0670  00F6               	movwf	??_GPIO_Init_Pin+2
  2141  0671  0870               	movf	GPIO_Init_Pin@DirRegAddress,w
  2142  0672  0084               	movwf	4
  2143  0673  1783               	bsf	3,7
  2144  0674  1C71               	btfss	GPIO_Init_Pin@DirRegAddress+1,0
  2145  0675  1383               	bcf	3,7
  2146  0676  0876               	movf	??_GPIO_Init_Pin+2,w
  2147  0677  0080               	movwf	0
  2148  0678                     l24:	
  2149  0678  0008               	return
  2150  0679                     __end_of_GPIO_Init_Pin:	
  2151                           
  2152                           	psect	text10
  2153  05C4                     __ptext10:	
  2154 ;; *************** function _CLOCK_Update *****************
  2155 ;; Defined at:
  2156 ;;		line 107 in file "Clock.c"
  2157 ;; Parameters:    Size  Location     Type
  2158 ;;		None
  2159 ;; Auto vars:     Size  Location     Type
  2160 ;;		None
  2161 ;; Return value:  Size  Location     Type
  2162 ;;                  1    wreg      void 
  2163 ;; Registers used:
  2164 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2165 ;; Tracked objects:
  2166 ;;		On entry : 0/0
  2167 ;;		On exit  : 0/0
  2168 ;;		Unchanged: 0/0
  2169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2170 ;;      Params:         0       0       0       0       0
  2171 ;;      Locals:         0       0       0       0       0
  2172 ;;      Temps:          2       0       0       0       0
  2173 ;;      Totals:         2       0       0       0       0
  2174 ;;Total ram usage:        2 bytes
  2175 ;; Hardware stack levels used:    1
  2176 ;; Hardware stack levels required when called:    3
  2177 ;; This function calls:
  2178 ;;		_CLOCK_Increment
  2179 ;;		_SW_GetState
  2180 ;;		_set_mode_process
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           
  2187                           ;psect for function _CLOCK_Update
  2188  05C4                     _CLOCK_Update:	
  2189  05C4                     l1375:	
  2190                           ;incstack = 0
  2191                           ; Regs used in _CLOCK_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2192                           
  2193                           
  2194                           ;Clock.c: 113:     if(SW_GetState(SW_SET)== SW_PRESSED)
  2195  05C4  3002               	movlw	2
  2196  05C5  120A  118A  2414  120A  118A  	fcall	_SW_GetState
  2197  05CA  3A02               	xorlw	2
  2198  05CB  1D03               	skipz
  2199  05CC  2DCE               	goto	u581
  2200  05CD  2DCF               	goto	u580
  2201  05CE                     u581:	
  2202  05CE  2DEF               	goto	l1387
  2203  05CF                     u580:	
  2204  05CF  2DDA               	goto	l1385
  2205  05D0                     l162:	
  2206                           ;Clock.c: 117:         {;Clock.c: 118:             case CL_NORMAL:
  2207                           
  2208                           
  2209                           ;Clock.c: 119:                 CurrentMode = CL_SET_HOURS;
  2210  05D0  01AD               	clrf	_CurrentMode
  2211  05D1  0AAD               	incf	_CurrentMode,f
  2212                           
  2213                           ;Clock.c: 120:                 break;
  2214  05D2  2DEF               	goto	l1387
  2215  05D3                     l1379:	
  2216                           
  2217                           ;Clock.c: 122:                 CurrentMode = CL_SET_MINUTES;
  2218  05D3  3002               	movlw	2
  2219  05D4  00FA               	movwf	??_CLOCK_Update
  2220  05D5  087A               	movf	??_CLOCK_Update,w
  2221  05D6  00AD               	movwf	_CurrentMode
  2222                           
  2223                           ;Clock.c: 123:                 break;
  2224  05D7  2DEF               	goto	l1387
  2225  05D8                     l1381:	
  2226                           
  2227                           ;Clock.c: 125:                 CurrentMode = CL_NORMAL;
  2228  05D8  01AD               	clrf	_CurrentMode
  2229                           
  2230                           ;Clock.c: 126:                 break;
  2231  05D9  2DEF               	goto	l1387
  2232  05DA                     l1385:	
  2233  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  2234  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  2235  05DC  082D               	movf	_CurrentMode,w
  2236  05DD  00FA               	movwf	??_CLOCK_Update
  2237  05DE  01FB               	clrf	??_CLOCK_Update+1
  2238                           
  2239                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2240                           ; Switch size 1, requested type "simple"
  2241                           ; Number of cases is 1, Range of values is 0 to 0
  2242                           ; switch strategies available:
  2243                           ; Name         Instructions Cycles
  2244                           ; simple_byte            4     3 (average)
  2245                           ; direct_byte           11     8 (fixed)
  2246                           ; jumptable            260     6 (fixed)
  2247                           ;	Chosen strategy is simple_byte
  2248  05DF  087B               	movf	??_CLOCK_Update+1,w
  2249  05E0  3A00               	xorlw	0	; case 0
  2250  05E1  1903               	skipnz
  2251  05E2  2DE4               	goto	l1567
  2252  05E3  2DEF               	goto	l1387
  2253  05E4                     l1567:	
  2254                           
  2255                           ; Switch size 1, requested type "simple"
  2256                           ; Number of cases is 3, Range of values is 0 to 2
  2257                           ; switch strategies available:
  2258                           ; Name         Instructions Cycles
  2259                           ; simple_byte           10     6 (average)
  2260                           ; direct_byte           17     8 (fixed)
  2261                           ; jumptable            260     6 (fixed)
  2262                           ;	Chosen strategy is simple_byte
  2263  05E4  087A               	movf	??_CLOCK_Update,w
  2264  05E5  3A00               	xorlw	0	; case 0
  2265  05E6  1903               	skipnz
  2266  05E7  2DD0               	goto	l162
  2267  05E8  3A01               	xorlw	1	; case 1
  2268  05E9  1903               	skipnz
  2269  05EA  2DD3               	goto	l1379
  2270  05EB  3A03               	xorlw	3	; case 2
  2271  05EC  1903               	skipnz
  2272  05ED  2DD8               	goto	l1381
  2273  05EE  2DEF               	goto	l1387
  2274  05EF                     l1387:	
  2275                           
  2276                           ;Clock.c: 133:     if(CurrentMode == CL_NORMAL)
  2277  05EF  1283               	bcf	3,5	;RP0=0, select bank0
  2278  05F0  1303               	bcf	3,6	;RP1=0, select bank0
  2279  05F1  082D               	movf	_CurrentMode,w
  2280  05F2  1D03               	btfss	3,2
  2281  05F3  2DF5               	goto	u591
  2282  05F4  2DF6               	goto	u590
  2283  05F5                     u591:	
  2284  05F5  2E0A               	goto	l1397
  2285  05F6                     u590:	
  2286  05F6                     l1389:	
  2287                           
  2288                           ;Clock.c: 134:     {;Clock.c: 135:         CLOCK_Increment();
  2289  05F6  120A  118A  23D5  120A  118A  	fcall	_CLOCK_Increment
  2290                           
  2291                           ;Clock.c: 136:     }
  2292  05FB  2E1A               	goto	l174
  2293  05FC                     l1391:	
  2294                           
  2295                           ;Clock.c: 144:                 set_mode_process(&CurrentTime.hours);
  2296  05FC  302F               	movlw	(low (_CurrentTime| 0))& (0+255)
  2297  05FD  120A  118A  243D  120A  118A  	fcall	_set_mode_process
  2298                           
  2299                           ;Clock.c: 145:                 break;
  2300  0602  2E1A               	goto	l174
  2301  0603                     l1393:	
  2302                           
  2303                           ;Clock.c: 148:                 set_mode_process(&CurrentTime.minuts);
  2304  0603  3030               	movlw	(low ((_CurrentTime| 0+1)))& (0+255)
  2305  0604  120A  118A  243D  120A  118A  	fcall	_set_mode_process
  2306                           
  2307                           ;Clock.c: 149:                 break;
  2308  0609  2E1A               	goto	l174
  2309  060A                     l1397:	
  2310  060A  082D               	movf	_CurrentMode,w
  2311  060B  00FA               	movwf	??_CLOCK_Update
  2312  060C  01FB               	clrf	??_CLOCK_Update+1
  2313                           
  2314                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2315                           ; Switch size 1, requested type "simple"
  2316                           ; Number of cases is 1, Range of values is 0 to 0
  2317                           ; switch strategies available:
  2318                           ; Name         Instructions Cycles
  2319                           ; simple_byte            4     3 (average)
  2320                           ; direct_byte           11     8 (fixed)
  2321                           ; jumptable            260     6 (fixed)
  2322                           ;	Chosen strategy is simple_byte
  2323  060D  087B               	movf	??_CLOCK_Update+1,w
  2324  060E  3A00               	xorlw	0	; case 0
  2325  060F  1903               	skipnz
  2326  0610  2E12               	goto	l1569
  2327  0611  2E1A               	goto	l174
  2328  0612                     l1569:	
  2329                           
  2330                           ; Switch size 1, requested type "simple"
  2331                           ; Number of cases is 2, Range of values is 1 to 2
  2332                           ; switch strategies available:
  2333                           ; Name         Instructions Cycles
  2334                           ; simple_byte            7     4 (average)
  2335                           ; direct_byte           17    11 (fixed)
  2336                           ; jumptable            263     9 (fixed)
  2337                           ;	Chosen strategy is simple_byte
  2338  0612  087A               	movf	??_CLOCK_Update,w
  2339  0613  3A01               	xorlw	1	; case 1
  2340  0614  1903               	skipnz
  2341  0615  2DFC               	goto	l1391
  2342  0616  3A03               	xorlw	3	; case 2
  2343  0617  1903               	skipnz
  2344  0618  2E03               	goto	l1393
  2345  0619  2E1A               	goto	l174
  2346  061A                     l174:	
  2347  061A  0008               	return
  2348  061B                     __end_of_CLOCK_Update:	
  2349                           
  2350                           	psect	text11
  2351  043D                     __ptext11:	
  2352 ;; *************** function _set_mode_process *****************
  2353 ;; Defined at:
  2354 ;;		line 157 in file "Clock.c"
  2355 ;; Parameters:    Size  Location     Type
  2356 ;;  var             1    wreg     PTR unsigned char 
  2357 ;;		 -> CurrentTime(4), 
  2358 ;; Auto vars:     Size  Location     Type
  2359 ;;  var             1    9[COMMON] PTR unsigned char 
  2360 ;;		 -> CurrentTime(4), 
  2361 ;; Return value:  Size  Location     Type
  2362 ;;                  1    wreg      void 
  2363 ;; Registers used:
  2364 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2365 ;; Tracked objects:
  2366 ;;		On entry : 0/0
  2367 ;;		On exit  : 0/0
  2368 ;;		Unchanged: 0/0
  2369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2370 ;;      Params:         0       0       0       0       0
  2371 ;;      Locals:         1       0       0       0       0
  2372 ;;      Temps:          1       0       0       0       0
  2373 ;;      Totals:         2       0       0       0       0
  2374 ;;Total ram usage:        2 bytes
  2375 ;; Hardware stack levels used:    1
  2376 ;; Hardware stack levels required when called:    2
  2377 ;; This function calls:
  2378 ;;		_SW_GetState
  2379 ;; This function is called by:
  2380 ;;		_CLOCK_Update
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           
  2385                           ;psect for function _set_mode_process
  2386  043D                     _set_mode_process:	
  2387                           
  2388                           ;incstack = 0
  2389                           ; Regs used in _set_mode_process: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2390                           ;set_mode_process@var stored from wreg
  2391  043D  00F9               	movwf	set_mode_process@var
  2392  043E                     l1319:	
  2393                           
  2394                           ;Clock.c: 157: void set_mode_process(u8_t * var);Clock.c: 158: {;Clock.c: 159:     if(SW
      +                          _GetState(SW_PLUS) == SW_PRE_PRESSED)
  2395  043E  3000               	movlw	0
  2396  043F  120A  118A  2414  120A  118A  	fcall	_SW_GetState
  2397  0444  3A01               	xorlw	1
  2398  0445  1D03               	skipz
  2399  0446  2C48               	goto	u541
  2400  0447  2C49               	goto	u540
  2401  0448                     u541:	
  2402  0448  2C50               	goto	l1323
  2403  0449                     u540:	
  2404  0449                     l1321:	
  2405                           
  2406                           ;Clock.c: 160:     {;Clock.c: 163:         *var += 1;
  2407  0449  3001               	movlw	1
  2408  044A  00F8               	movwf	??_set_mode_process
  2409  044B  0879               	movf	set_mode_process@var,w
  2410  044C  0084               	movwf	4
  2411  044D  0878               	movf	??_set_mode_process,w
  2412  044E  1383               	bcf	3,7	;select IRP bank0
  2413  044F  0780               	addwf	0,f
  2414  0450                     l1323:	
  2415                           
  2416                           ;Clock.c: 165:     if(SW_GetState(SW_MINUS) == SW_PRE_PRESSED)
  2417  0450  3001               	movlw	1
  2418  0451  120A  118A  2414  120A  118A  	fcall	_SW_GetState
  2419  0456  3A01               	xorlw	1
  2420  0457  1D03               	skipz
  2421  0458  2C5A               	goto	u551
  2422  0459  2C5B               	goto	u550
  2423  045A                     u551:	
  2424  045A  2C60               	goto	l179
  2425  045B                     u550:	
  2426  045B                     l1325:	
  2427                           
  2428                           ;Clock.c: 166:     {;Clock.c: 169:         *var -= 1;
  2429  045B  0879               	movf	set_mode_process@var,w
  2430  045C  0084               	movwf	4
  2431  045D  3001               	movlw	1
  2432  045E  1383               	bcf	3,7	;select IRP bank0
  2433  045F  0280               	subwf	0,f
  2434  0460                     l179:	
  2435  0460  0008               	return
  2436  0461                     __end_of_set_mode_process:	
  2437                           
  2438                           	psect	text12
  2439  0414                     __ptext12:	
  2440 ;; *************** function _SW_GetState *****************
  2441 ;; Defined at:
  2442 ;;		line 61 in file "SW.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;  sw              1    wreg     enum E859
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  sw              1    6[COMMON] enum E859
  2447 ;;  ret             1    7[COMMON] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      unsigned char 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2457 ;;      Params:         0       0       0       0       0
  2458 ;;      Locals:         2       0       0       0       0
  2459 ;;      Temps:          2       0       0       0       0
  2460 ;;      Totals:         4       0       0       0       0
  2461 ;;Total ram usage:        4 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    1
  2464 ;; This function calls:
  2465 ;;		___bmul
  2466 ;; This function is called by:
  2467 ;;		_CLOCK_Update
  2468 ;;		_set_mode_process
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           
  2473                           ;psect for function _SW_GetState
  2474  0414                     _SW_GetState:	
  2475                           
  2476                           ;incstack = 0
  2477                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2478                           ;SW_GetState@sw stored from wreg
  2479  0414  00F6               	movwf	SW_GetState@sw
  2480  0415                     l1181:	
  2481  0415                     l1183:	
  2482                           
  2483                           ;SW.c: 66:     ret = SW_DATA[sw].state;
  2484  0415  3003               	movlw	3
  2485  0416  00F4               	movwf	??_SW_GetState
  2486  0417  0874               	movf	??_SW_GetState,w
  2487  0418  00F0               	movwf	___bmul@multiplicand
  2488  0419  0876               	movf	SW_GetState@sw,w
  2489  041A  120A  118A  2428  120A  118A  	fcall	___bmul
  2490  041F  3E22               	addlw	(low ((_SW_DATA| 0+2)))& (0+255)
  2491  0420  0084               	movwf	4
  2492  0421  1383               	bcf	3,7	;select IRP bank0
  2493  0422  0800               	movf	0,w
  2494  0423  00F5               	movwf	??_SW_GetState+1
  2495  0424  0875               	movf	??_SW_GetState+1,w
  2496  0425  00F7               	movwf	SW_GetState@ret
  2497  0426                     l1185:	
  2498                           
  2499                           ;SW.c: 68:     return ret;
  2500  0426  0877               	movf	SW_GetState@ret,w
  2501  0427                     l116:	
  2502  0427  0008               	return
  2503  0428                     __end_of_SW_GetState:	
  2504                           
  2505                           	psect	text13
  2506  0428                     __ptext13:	
  2507 ;; *************** function ___bmul *****************
  2508 ;; Defined at:
  2509 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  2510 ;; Parameters:    Size  Location     Type
  2511 ;;  multiplier      1    wreg     unsigned char 
  2512 ;;  multiplicand    1    0[COMMON] unsigned char 
  2513 ;; Auto vars:     Size  Location     Type
  2514 ;;  multiplier      1    3[COMMON] unsigned char 
  2515 ;;  product         1    2[COMMON] unsigned char 
  2516 ;; Return value:  Size  Location     Type
  2517 ;;                  1    wreg      unsigned char 
  2518 ;; Registers used:
  2519 ;;		wreg, status,2, status,0
  2520 ;; Tracked objects:
  2521 ;;		On entry : 0/0
  2522 ;;		On exit  : 0/0
  2523 ;;		Unchanged: 0/0
  2524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2525 ;;      Params:         1       0       0       0       0
  2526 ;;      Locals:         2       0       0       0       0
  2527 ;;      Temps:          1       0       0       0       0
  2528 ;;      Totals:         4       0       0       0       0
  2529 ;;Total ram usage:        4 bytes
  2530 ;; Hardware stack levels used:    1
  2531 ;; This function calls:
  2532 ;;		Nothing
  2533 ;; This function is called by:
  2534 ;;		_SW_GetState
  2535 ;;		_SW_UpdateState
  2536 ;; This function uses a non-reentrant model
  2537 ;;
  2538                           
  2539                           
  2540                           ;psect for function ___bmul
  2541  0428                     ___bmul:	
  2542                           
  2543                           ;incstack = 0
  2544                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  2545                           ;___bmul@multiplier stored from wreg
  2546  0428  00F3               	movwf	___bmul@multiplier
  2547  0429                     l1167:	
  2548  0429  01F2               	clrf	___bmul@product
  2549  042A                     l1169:	
  2550  042A  1C73               	btfss	___bmul@multiplier,0
  2551  042B  2C2D               	goto	u311
  2552  042C  2C2E               	goto	u310
  2553  042D                     u311:	
  2554  042D  2C32               	goto	l1173
  2555  042E                     u310:	
  2556  042E                     l1171:	
  2557  042E  0870               	movf	___bmul@multiplicand,w
  2558  042F  00F1               	movwf	??___bmul
  2559  0430  0871               	movf	??___bmul,w
  2560  0431  07F2               	addwf	___bmul@product,f
  2561  0432                     l1173:	
  2562  0432  1003               	clrc
  2563  0433  0DF0               	rlf	___bmul@multiplicand,f
  2564  0434                     l1175:	
  2565  0434  1003               	clrc
  2566  0435  0CF3               	rrf	___bmul@multiplier,f
  2567  0436  0873               	movf	___bmul@multiplier,w
  2568  0437  1D03               	btfss	3,2
  2569  0438  2C3A               	goto	u321
  2570  0439  2C3B               	goto	u320
  2571  043A                     u321:	
  2572  043A  2C2A               	goto	l1169
  2573  043B                     u320:	
  2574  043B                     l1177:	
  2575  043B  0872               	movf	___bmul@product,w
  2576  043C                     l291:	
  2577  043C  0008               	return
  2578  043D                     __end_of___bmul:	
  2579                           
  2580                           	psect	text14
  2581  03D5                     __ptext14:	
  2582 ;; *************** function _CLOCK_Increment *****************
  2583 ;; Defined at:
  2584 ;;		line 68 in file "Clock.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;		None
  2587 ;; Auto vars:     Size  Location     Type
  2588 ;;		None
  2589 ;; Return value:  Size  Location     Type
  2590 ;;                  1    wreg      void 
  2591 ;; Registers used:
  2592 ;;		wreg, status,2, status,0
  2593 ;; Tracked objects:
  2594 ;;		On entry : 0/0
  2595 ;;		On exit  : 0/0
  2596 ;;		Unchanged: 0/0
  2597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2598 ;;      Params:         0       0       0       0       0
  2599 ;;      Locals:         0       0       0       0       0
  2600 ;;      Temps:          1       0       0       0       0
  2601 ;;      Totals:         1       0       0       0       0
  2602 ;;Total ram usage:        1 bytes
  2603 ;; Hardware stack levels used:    1
  2604 ;; This function calls:
  2605 ;;		Nothing
  2606 ;; This function is called by:
  2607 ;;		_CLOCK_Update
  2608 ;; This function uses a non-reentrant model
  2609 ;;
  2610                           
  2611                           
  2612                           ;psect for function _CLOCK_Increment
  2613  03D5                     _CLOCK_Increment:	
  2614  03D5                     l1297:	
  2615                           ;incstack = 0
  2616                           ; Regs used in _CLOCK_Increment: [wreg+status,2+status,0]
  2617                           
  2618                           
  2619                           ;Clock.c: 71:     CurrentTime.mSeconds+=(5);
  2620  03D5  3005               	movlw	5
  2621  03D6  00F0               	movwf	??_CLOCK_Increment
  2622  03D7  0870               	movf	??_CLOCK_Increment,w
  2623  03D8  1283               	bcf	3,5	;RP0=0, select bank0
  2624  03D9  1303               	bcf	3,6	;RP1=0, select bank0
  2625  03DA  07B2               	addwf	_CurrentTime+3,f
  2626  03DB                     l157:	
  2627                           ;Clock.c: 73:     if(CurrentTime.mSeconds >= 1000)
  2628                           
  2629  03DB  0008               	return
  2630  03DC                     __end_of_CLOCK_Increment:	
  2631                           
  2632                           	psect	text15
  2633  03DC                     __ptext15:	
  2634 ;; *************** function _CLOCK_Init *****************
  2635 ;; Defined at:
  2636 ;;		line 33 in file "Clock.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;		None
  2639 ;; Auto vars:     Size  Location     Type
  2640 ;;		None
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		status,2
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2650 ;;      Params:         0       0       0       0       0
  2651 ;;      Locals:         0       0       0       0       0
  2652 ;;      Temps:          0       0       0       0       0
  2653 ;;      Totals:         0       0       0       0       0
  2654 ;;Total ram usage:        0 bytes
  2655 ;; Hardware stack levels used:    1
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_main
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           
  2664                           ;psect for function _CLOCK_Init
  2665  03DC                     _CLOCK_Init:	
  2666  03DC                     l1355:	
  2667                           ;incstack = 0
  2668                           ; Regs used in _CLOCK_Init: [status,2]
  2669                           
  2670                           
  2671                           ;Clock.c: 36:     CurrentTime.hours = 0;
  2672  03DC  1283               	bcf	3,5	;RP0=0, select bank0
  2673  03DD  1303               	bcf	3,6	;RP1=0, select bank0
  2674  03DE  01AF               	clrf	_CurrentTime
  2675                           
  2676                           ;Clock.c: 37:     CurrentTime.minuts = 0;
  2677  03DF  01B0               	clrf	_CurrentTime+1
  2678                           
  2679                           ;Clock.c: 38:     CurrentTime.seconds = 0;
  2680  03E0  01B1               	clrf	_CurrentTime+2
  2681                           
  2682                           ;Clock.c: 39:     CurrentTime.mSeconds = 0;
  2683  03E1  01B2               	clrf	_CurrentTime+3
  2684                           
  2685                           ;Clock.c: 42:     CurrentMode = CL_NORMAL;
  2686  03E2  01AD               	clrf	_CurrentMode
  2687  03E3                     l144:	
  2688  03E3  0008               	return
  2689  03E4                     __end_of_CLOCK_Init:	
  2690  007E                     btemp	set	126	;btemp
  2691  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      1      31
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    set_mode_process@var	PTR unsigned char  size(1) Largest target is 4
		 -> CurrentTime(BANK0[4]), 

    GPIO_Init_Pin@DirRegAddress	PTR unsigned char  size(2) Largest target is 512
		 -> RAM(DATA[512]), TRISB(SFR1[1]), 

    GPIO_Init_Port@DirRegAddress	PTR unsigned char  size(2) Largest target is 1
		 -> TRISD(SFR1[1]), 


Critical Paths under _main in COMMON

    _main->_CLOCK_Update
    _SW_Update->_SW_UpdateState
    _SW_UpdateState->___bmul
    _SSD_Update->_SSD_Disable
    _SSD_Update->_SSD_Enable
    _SSD_Init->_GPIO_Init_Pin
    _CLOCK_Update->_set_mode_process
    _set_mode_process->_SW_GetState
    _SW_GetState->___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    4045
                                             12 COMMON     2     2      0
                                              0 BANK0      1     1      0
                         _CLOCK_Init
                       _CLOCK_Update
                           _SSD_Init
                     _SSD_Set_Symbol
                         _SSD_Update
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            2     2      0     742
                                              8 COMMON     2     2      0
                     _SW_UpdateState
 ---------------------------------------------------------------------------------
 (2) _SW_UpdateState                                       4     4      0     742
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0      44
                                              3 COMMON     1     1      0
                        _SSD_Disable
                         _SSD_Enable
 ---------------------------------------------------------------------------------
 (2) _SSD_Enable                                           3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _SSD_Disable                                          3     3      0      22
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _SSD_Set_Symbol                                       3     2      1     348
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             3     3      0    1774
                                              8 COMMON     3     3      0
                      _GPIO_Init_Pin
                     _GPIO_Init_Port
 ---------------------------------------------------------------------------------
 (2) _GPIO_Init_Port                                       7     4      3     338
                                              0 COMMON     7     4      3
 ---------------------------------------------------------------------------------
 (2) _GPIO_Init_Pin                                        8     4      4    1368
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _CLOCK_Update                                         2     2      0    1114
                                             10 COMMON     2     2      0
                    _CLOCK_Increment
                        _SW_GetState
                   _set_mode_process
 ---------------------------------------------------------------------------------
 (2) _set_mode_process                                     2     2      0     612
                                              8 COMMON     2     2      0
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (3) _SW_GetState                                          4     4      0     502
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     456
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Increment                                      1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CLOCK_Init                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLOCK_Init
   _CLOCK_Update
     _CLOCK_Increment
     _SW_GetState
       ___bmul
     _set_mode_process
       _SW_GetState
         ___bmul
   _SSD_Init
     _GPIO_Init_Pin
     _GPIO_Init_Port
   _SSD_Set_Symbol
   _SSD_Update
     _SSD_Disable
     _SSD_Enable
   _SW_Update
     _SW_UpdateState
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      1      1F       5       38.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2D      12        0.0%
ABS                  0      0      2D       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 07 09:06:37 2020

                          pc 0002                   _SSD_Update 0461               ___bmul@product 0072  
                __CFG_CP$OFF 0000          __end_of_SW_GetState 0428                           l24 0678  
                         l19 05C3                           l80 0485                           l73 06EC  
                         l90 04B6                           l76 03F5                           fsr 0004  
                        l100 04EB                          l116 0427                          l133 07E5  
                        l119 052A                          l144 03E3                          l162 05D0  
                        l157 03DB                          l174 061A                          l291 043C  
                        l179 0460                          u310 042E                          u311 042D  
                        u320 043B                          u400 0633                          u321 043A  
                        u401 0632                          u410 063E                          u330 0581  
                        u411 063D                          u331 0580                          u420 0649  
                        u340 058C                          u500 0768                          u421 0648  
                        u341 058B                          u501 0767                          u430 0654  
                        u350 0597                          u510 077A                          u431 0653  
                        u351 0596                          u511 0779                          u360 05A2  
                        u600 0475                          u520 079E                          u361 05A1  
                        u601 0474                          u521 079D                          u370 05AD  
                        u530 07B0                 __CFG_CPD$OFF 0000                          u371 05AC  
                        u531 07AF                          u540 0449                          u444 065B  
                        u380 05B3                          u460 0701                          u541 0448  
                        u445 0659                          u381 05B2                          u461 0700  
                        u550 045B                          u454 0669                          u390 0628  
                        u470 0713                          u551 045A                          u455 0667  
                        u391 0627                          u471 0712                          u560 06A0  
                        u480 0734                          u561 069F                          u481 0733  
                        u617 055C                          u490 0746                          u491 0745  
                        u580 05CF                          u581 05CE                          u565 069C  
                        u590 05F6                          u591 05F5                          u575 051A  
                        fsr0 0004                          indf 0000                 __CFG_FOSC$HS 0000  
               __CFG_LVP$OFF 0000                         l1201 05AD                         l1203 05AE  
                       l1221 063E                         l1213 061B                         l1205 05B3  
                       l1223 0649                         l1215 061B                         l1207 05B6  
                       l1231 0487                         l1321 0449                         l1225 0654  
                       l1217 0628                         l1209 05BA                         l1233 0488  
                       l1241 04A0                         l1171 042E                         l1323 0450  
                       l1219 0633                         l1227 0655                         l1235 048E  
                       l1251 04C0                         l1411 046F                         l1173 0432  
                       l1181 0415                         l1325 045B                         l1341 06A0  
                       l1237 0494                         l1253 04C7                         l1413 0475  
                       l1421 052B                         l1175 0434                         l1167 0429  
                       l1183 0415                         l1319 043E                         l1191 0574  
                       l1351 06E7                         l1343 06AE                         l1335 0685  
                       l1327 0679                         l1239 049A                         l1255 04CE  
                       l1247 04B8                         l1415 0476                         l1407 0461  
                       l1271 0722                         l1263 06EE                         l1431 0553  
                       l1423 0530                         l1177 043B                         l1169 042A  
                       l1185 0426                         l1193 0581                         l1345 06B3  
                       l1337 068D                         l1329 067B                         l1353 03ED  
                       l1249 04B9                         l1257 04D5                         l1417 047F  
                       l1409 0469                         l1281 077A                         l1273 0734  
                       l1265 06EF                         l1361 04F7                         l1433 0558  
                       l1425 0537                         l1355 03DC                         l1195 058C  
                       l1347 06C6                         l1339 0693                         l1283 078C  
                       l1275 0746                         l1267 0701                         l1291 07C2  
                       l1371 0517                         l1363 04FD                         l1435 0561  
                       l1427 053F                         l1419 052B                         l1381 05D8  
                       l1197 0597                         l1189 0574                         l1349 06D4  
                       l1285 079E                         l1277 0756                         l1269 0713  
                       l1373 0524                         l1365 0503                         l1357 04EC  
                       l1437 0566                         l1429 0549                         l1391 05FC  
                       l1375 05C4                         l1199 05A2                         l1287 07B0  
                       l1279 0768                         l1367 050B                         l1359 04F2  
                       l1439 056B                         l1297 03D5                         l1393 0603  
                       l1385 05DA                         l1561 07D7                         l1369 0511  
                       l1379 05D3                         l1387 05EF                         l1563 04DD  
                       l1389 05F6                         l1397 060A                         l1565 04A8  
                       l1567 05E4                         l1569 0612                 __CFG_WRT$OFF 0000  
                       _main 052B                         btemp 007E                         start 0000  
        __size_of_CLOCK_Init 0008         __end_of_CLOCK_Update 061B            ___bmul@multiplier 0073  
              _GPIO_Init_Pin 061B               _SSD_Set_Symbol 03EC                        ?_main 0070  
              __CFG_WDTE$OFF 0000                        _PORTB 0006                        _PORTD 0008  
                      _TRISA 0085                        _TRISB 0086                        _TRISC 0087  
                      _TRISD 0088                        _TRISE 0089          set_mode_process@var 0079  
          _GPIO_Init_Port$31 0075            ??_CLOCK_Increment 0070             __end_of_SSD_Init 06ED  
             __CFG_BOREN$OFF 0000                        pclath 000A                        status 0003  
                      wtemp0 007E                 SSD_Disable@s 0072      __size_of_SW_UpdateState 00F9  
                _SW_GetState 0414                  ?_SSD_Enable 0070               ?_GPIO_Init_Pin 0070  
            __initialization 07E6                 __end_of_main 0574       __end_of_SSD_Set_Symbol 03F6  
             _GPIO_Init_Port 0574                  ?_SSD_Update 0070                       ??_main 007C  
         __size_of_SW_Update 003F  GPIO_Init_Port@DirRegAddress 0070   GPIO_Init_Pin@DirRegAddress 0070  
                     _Buffer 0029               __CFG_PWRTE$OFF 0000       __end_of_GPIO_Init_Port 05C4  
                     ___bmul 0428              ?_SSD_Set_Symbol 0070                 ??_CLOCK_Init 0070  
   __end_of_set_mode_process 0461          __size_of_SSD_Enable 0035          __size_of_SSD_Update 0025  
      __size_of_CLOCK_Update 0057      __end_of__initialization 07FC              ??_GPIO_Init_Pin 0074  
           GPIO_Init_Pin@dir 0073            __end_of_SW_Update 052B                 ?_SSD_Disable 0070  
        ___bmul@multiplicand 0070           __end_of_CLOCK_Init 03E4              ?_GPIO_Init_Port 0070  
             __pcstackCOMMON 0070                 __pidataBANK0 03F6                    ?_SSD_Init 0070  
                _CurrentMode 002D                  _CurrentTime 002F                SW_GetState@sw 0076  
               _CLOCK_Update 05C4                   __pbssBANK0 0020               _SW_UpdateState 06ED  
                 __pmaintext 052B                      ?___bmul 0070                   ??_SSD_Init 0078  
            _CLOCK_Increment 03D5       __end_of_SW_UpdateState 07E6                      _SW_DATA 0020  
        SSD_Set_Symbol@index 0070                    SSD_Init@i 0079                 ?_SW_GetState 0070  
               ??_SSD_Enable 0070              __size_of___bmul 0015                 ??_SSD_Update 0073  
                 _currentSSD 002E                      __ptext1 04EC                      __ptext2 06ED  
                    __ptext3 0461                      __ptext4 04B7                      __ptext5 0486  
                    __ptext6 03EC                      __ptext7 0679                      __ptext8 0574  
                    __ptext9 061B           __end_of_SSD_Enable 04EC                      clrloop0 03E5  
       end_of_initialization 07FC              ?_SW_UpdateState 0070           __end_of_SSD_Update 0486  
           ??_SSD_Set_Symbol 0071      __end_of_CLOCK_Increment 03DC         __size_of_SSD_Disable 0031  
          ?_set_mode_process 0070           ??_set_mode_process 0078      GPIO_Init_Pin@pin_number 0072  
           ??_GPIO_Init_Port 0073            GPIO_Init_Port@dir 0072                    _SW_Update 04EC  
             __end_of___bmul 043D                  SSD_Enable@s 0072            __size_of_SSD_Init 0074  
        start_initialization 07E6        __end_of_GPIO_Init_Pin 0679               SW_GetState@ret 0077  
           ?_CLOCK_Increment 0070                     ??___bmul 0071         __size_of_SW_GetState 0014  
                 init_fetch0 0401                   ?_SW_Update 0070                  __pdataBANK0 0033  
                  ___latbits 0002             ??_SW_UpdateState 0074             SW_UpdateState@sw 0077  
                  clear_ram0 03E4                  ??_SW_Update 0078                     _SSD_Init 0679  
       SSD_Set_Symbol@symbol 0072    __size_of_set_mode_process 0024                ??_SSD_Disable 0070  
                 _CLOCK_Init 03DC                ?_CLOCK_Update 0070                     __ptext10 05C4  
                   __ptext11 043D                     __ptext12 0414                     __ptext13 0428  
                   __ptext14 03D5                     __ptext15 03DC                __size_of_main 0049  
        __end_of_SSD_Disable 04B7      __size_of_SSD_Set_Symbol 000A               ??_CLOCK_Update 007A  
                   init_ram0 0405                ??_SW_GetState 0074      __size_of_GPIO_Init_Port 0050  
   __size_of_CLOCK_Increment 0007                  ?_CLOCK_Init 0070       __size_of_GPIO_Init_Pin 005E  
                _SSD_LOT_ARR 0033             _set_mode_process 043D                  _SSD_Disable 0486  
                 _SSD_Enable 04B7  
